This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
app/
  [...puckPath]/
    client.tsx
    page.tsx
  components/
    bodytext.tsx
    button.tsx
    callout.tsx
    card.tsx
    collapsible.tsx
    header.tsx
    headline.tsx
    section.tsx
    spacer.tsx
    stack.tsx
  fields/
    slider.js
    toggle.js
  puck/
    [...puckPath]/
      client.tsx
      page.tsx
    api/
      route.ts
    custom/
      headerActions.tsx
    page.tsx
  sections/
    faq.tsx
    footer.tsx
    hero.tsx
    stats.tsx
    team.tsx
  layout.tsx
  page.tsx
  root.js
  styles.css
lib/
  get-page.ts
tsconfig/
  base.json
  nextjs.json
.gitignore
database.json
middleware.ts
next-env.d.ts
next.config.js
package.json
postcss.config.mjs
puck.config.tsx
README.md
repomix-output-bgebelein-puck-page-builder.xml
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/[...puckPath]/client.tsx">
"use client";

import type { Data } from "@measured/puck";
import { Render } from "@measured/puck";
import config from "../../puck.config";

export function Client({ data }: { data: Data }) {
  return <Render config={config} data={data} />;
}
</file>

<file path="app/[...puckPath]/page.tsx">
/**
 * This file implements a catch-all route that renders the user-facing pages
 * generated by Puck. For any route visited (with exception of other hardcoded
 * pages in /app), it will check your database (via `getPage`) for a Puck page
 * and render it using <Render>.
 *
 * All routes produced by this page are statically rendered using incremental
 * static site generation. After the first visit, the page will be cached as
 * a static file. Subsequent visits will receive the cache. Publishing a page
 * will invalidate the cache as the page is written in /api/puck/route.ts
 */

import { Client } from "./client";
import { notFound } from "next/navigation";
import { Metadata } from "next";
import { getPage } from "../../lib/get-page";

export async function generateMetadata({
  params,
}: {
  params: Promise<{ puckPath: string[] }>;
}): Promise<Metadata> {
  const { puckPath = [] } = await params;
  const path = `/${puckPath.join("/")}`;

  return {
    title: getPage(path)?.root.props?.title,
  };
}

export default async function Page({
  params,
}: {
  params: Promise<{ puckPath: string[] }>;
}) {
  const { puckPath = [] } = await params;
  const path = `/${puckPath.join("/")}`;
  const data = getPage(path);

  if (!data) {
    return notFound();
  }

  return <Client data={data} />;
}

// Force Next.js to produce static pages: https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config#dynamic
// Delete this if you need dynamic rendering, such as access to headers or cookies
export const dynamic = "force-static";
</file>

<file path="app/components/bodytext.tsx">
import { ComponentConfig } from "@measured/puck";
import { Icon } from "@iconify/react";

export const Bodytext: ComponentConfig = {
  label: "Text",
  fields: {
    text: {
      label: "Text",
      labelIcon: <Icon icon="lucide:type" />,
      type: "textarea",
      placeholder: "Enter your text here",
      contentEditable: true,
    },
    size: {
      type: "radio",
      label: "Size",
      labelIcon: <Icon icon="lucide:a-large-small" />,
      options: [
        { label: "Large", value: "text-2xl" },
        { label: "Medium", value: "text-xl" },
        { label: "Small", value: "text-lg" },
      ],
    },
    alignment: {
      type: "radio",
      label: "Alignment",
      labelIcon: <Icon icon="lucide:align-left" />,
      options: [
        { label: "Start", value: "text-left" },
        { label: "Center", value: "text-center" },
        { label: "End", value: "text-right" },
      ],
    },
  },
  defaultProps: {
    text: "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.",
    size: "text-xl",
    alignment: "text-left",
  },
  render: ({ text, size, alignment }) => {
    return <p className={`${size} ${alignment}`}>{text}</p>;
  }
}
</file>

<file path="app/components/button.tsx">
import { ComponentConfig } from "@measured/puck";
import { Icon } from "@iconify/react";

const btnStyles = {
    base: "inline-flex gap-3 items-center px-4 py-3 rounded-xl text-xl font-medium border-2 transition-colors",
    disabled: "disabled:bg-slate-300 disabled:text-slate-500 disabled:cursor-not-allowed",
    themePrimary: "bg-theme text-white border-theme hover:bg-theme-hover hover:border-theme-hover active:bg-theme-active active:border-theme-active",
    themeSecondary: "text-theme hover:bg-theme/10 active:bg-theme/20",
    whitePrimary: "bg-white text-theme border-white hover:bg-white/90 hover:border-white/90 active:bg-white/80 active:border-white/80",
    whiteSecondary: "text-white hover:bg-white/10 active:bg-white/20",
    ghost: "text-theme border-transparent hover:bg-theme/10 active:bg-theme/20",
};

export const Button = ({
    label = "Button",
    url = "#",
    leadingIcon = "",
    trailingIcon = "",
    style = "themePrimary",
}) => {
    return (
        <a className={`${btnStyles.base} ${btnStyles.disabled} ${btnStyles[style]}`} href={url}>
            {leadingIcon && <Icon icon={leadingIcon} />}
            {label}
            {trailingIcon && <Icon icon={trailingIcon} />}
        </a>
    )
}

export const PuckButton: ComponentConfig = {
    label: "Button",
    fields: {
        label: {
            type: "text",
            label: "Label",
            labelIcon: <Icon icon="lucide:type" />,
            placeholder: "Button Label",
            contentEditable: true,
        },
        url: {
            label: "URL",
            labelIcon: <Icon icon="lucide:link" />,
            type: "text"
        },
        style: {
            label: "Style",
            labelIcon: <Icon icon="lucide:chevron-down" />,
            type: "select",
            options: [
                { label: "Theme Primary", value: "themePrimary" },
                { label: "Theme Secondary", value: "themeSecondary" },
                { label: "White Primary", value: "whitePrimary" },
                { label: "White Secondary", value: "whiteSecondary" },
                { label: "Ghost", value: "ghost" },
            ],
        },
        leadingIcon: {
            type: "select",
            label: "Leading Icon",
            labelIcon: <Icon icon="lucide:circle" />,
            options: [
                { label: "None", value: "" },
                { label: "arrow-left", value: "tabler:arrow-narrow-left" },
                { label: "arrow-right", value: "tabler:arrow-narrow-right" },
            ],
        },
        trailingIcon: {
            type: "select",
            label: "Trailing Icon",
            labelIcon: <Icon icon="lucide:circle" />,
            options: [
                { label: "None", value: "" },
                { label: "arrow-left", value: "tabler:arrow-narrow-left" },
                { label: "arrow-right", value: "tabler:arrow-narrow-right" },
            ],
        },
    },
    defaultProps: {
        label: "Button",
        url: "#",
        style: "themePrimary",
    },
    render: ({ url, style, label, trailingIcon, leadingIcon }) => {
        return (
            <Button url={url} style={style} label={label} trailingIcon={trailingIcon} leadingIcon={leadingIcon} />
        );
    },
};
</file>

<file path="app/components/section.tsx">
import { ComponentConfig } from "@measured/puck";
import { Icon } from "@iconify/react";

export const Section: ComponentConfig = {
    label: "Section",
    fields: {
        content: {
            type: "slot",
        },
        bgColor: {
            label: "Background Color",
            labelIcon: <Icon icon="lucide:paint-bucket" />,
            type: "select",
            options: [
                { label: "None", value: "bg-transparent" },
                { label: "Light", value: "bg-light" },
                { label: "Dark", value: "bg-dark" },
                { label: "Muted", value: "bg-muted" },
                { label: "Theme", value: "bg-theme" },
            ],
        },
    },
    defaultProps: {
        bgColor: "bg-transparent",
    },
    render: ({ bgColor, content: Content }) => {
        return (
            <section className={`py-30 ${bgColor}`}>
                <Content className="container" />
            </section>
        );
    },
}
</file>

<file path="app/components/spacer.tsx">
import { Icon } from "@iconify/react";
import { ComponentConfig } from "@measured/puck";

const spacings = {
    1: "size-4",
    2: "size-6",
    3: "size-10",
    4: "size-20",
    5: "size-40",
}

export const Spacer: ComponentConfig = {
    label: "Spacer",
    fields: {
        size: {
            type: "slider",
            label: "Size",
            icon: <Icon icon="lucide:sliders-horizontal" />,
            min: 1,
            max: 5,
            step: 1,
        },
    },
    defaultProps: {
        size: 3,
    },
    render: ({ direction, size }) => {
        return (
            <div className={spacings[size]}></div>
        );
    },
}
</file>

<file path="app/components/stack.tsx">
import { ComponentConfig } from "@measured/puck";
import { Icon } from "@iconify/react";

export const Stack: ComponentConfig = {
    label: "Stack",
    fields: {
        content: {
            type: "slot",
        },
        direction: {
            type: "radio",
            label: "Direction",
            labelIcon: <Icon icon="lucide:move" />,
            options: [
                { label: "Horizontal", value: "flex-row" },
                { label: "Vertical", value: "flex-col" },
            ],
        },
        horizontalAlignment: {
            type: "radio",
            label: "Horizontal Alignment",
            labelIcon: <Icon icon="lucide:align-center-vertical" />,
            options: [
                { label: "Start", value: "justify-start" },
                { label: "Center", value: "justify-center justify-items-center" },
                { label: "End", value: "justify-end" },
            ],
        },
        verticalAlignment: {
            type: "radio",
            label: "Vertical Alignment",
            labelIcon: <Icon icon="lucide:align-center-horizontal" />,
            options: [
                { label: "Start", value: "items-start" },
                { label: "Center", value: "items-center" },
                { label: "End", value: "items-end" },
            ],
        },
        gap: {
            label: "Gap Size",
            labelIcon: <Icon icon="lucide:align-horizontal-space-around" />,
            type: "select",
            options: [
                { label: "None", value: "gap-0" },
                { label: "XS", value: "gap-1" },
                { label: "SM", value: "gap-2" },
                { label: "MD", value: "gap-4" },
                { label: "LG", value: "gap-6" },
                { label: "XL", value: "gap-10" },
                { label: "2XL", value: "gap-20" },
            ],
        },
    },
    defaultProps: {
        direction: "flex-row",
        verticalAlignment: "items-center",
        horizontalAlignment: "justify-center justify-items-center",
        gap: "gap-4",
    },
    render: ({ direction, horizontalAlignment, verticalAlignment, gap, content: Content }) => {
        return (
            <Content className={`flex flex-wrap *:grow *:basis-0 ${direction} ${horizontalAlignment} ${verticalAlignment} ${gap}`} />
        );
    },
}
</file>

<file path="app/fields/toggle.js">
import { FieldLabel } from "@measured/puck";

export const puckToggle = ({ field, onChange, value }) => (
    <FieldLabel label={field.label} icon={field.icon}>
        <input
            type="checkbox"
            defaultValue={value}
            name={field.label}
            onChange={(e) => onChange(e.currentTarget.value)}
            checked={value}
        />
    </FieldLabel>
)
</file>

<file path="app/puck/[...puckPath]/page.tsx">
/**
 * This file implements a *magic* catch-all route that renders the Puck editor.
 *
 * This route exposes /puck/[...puckPath], but is disabled by middleware.ts. The middleware
 * then rewrites all URL requests ending in `/edit` to this route, allowing you to visit any
 * page in your application and add /edit to the end to spin up a Puck editor.
 *
 * This approach enables public pages to be statically rendered whilst the /puck route can
 * remain dynamic.
 *
 * NB this route is public, and you will need to add authentication
 */

import "@measured/puck/puck.css";
import { Client } from "./client";
import { Metadata } from "next";
import { getPage } from "../../../lib/get-page";

export async function generateMetadata({
  params,
}: {
  params: Promise<{ puckPath: string[] }>;
}): Promise<Metadata> {
  const { puckPath = [] } = await params;
  const path = `/${puckPath.join("/")}`;

  return {
    title: "Puck: " + path,
  };
}

export default async function Page({
  params,
}: {
  params: Promise<{ puckPath: string[] }>;
}) {
  const { puckPath = [] } = await params;
  const path = `/${puckPath.join("/")}`;
  const data = getPage(path);

  return <Client path={path} data={data || {}} />;
}

export const dynamic = "force-dynamic";
</file>

<file path="app/puck/api/route.ts">
import { revalidatePath } from "next/cache";
import { NextResponse } from "next/server";
import fs from "fs";

export async function POST(request: Request) {
  const payload = await request.json();

  const existingData = JSON.parse(
    fs.existsSync("database.json")
      ? fs.readFileSync("database.json", "utf-8")
      : "{}"
  );

  const updatedData = {
    ...existingData,
    [payload.path]: payload.data,
  };

  fs.writeFileSync("database.json", JSON.stringify(updatedData));

  // Purge Next.js cache
  revalidatePath(payload.path);

  return NextResponse.json({ status: "ok" });
}
</file>

<file path="app/puck/custom/headerActions.tsx">
import { createUsePuck, Button } from "@measured/puck";
import { Icon } from "@iconify/react";

export function headerActions({ children }) {
  const usePuck = createUsePuck();
  const dispatch = usePuck((s) => s.dispatch);
  const previewMode = usePuck((s) => s.appState.ui.previewMode);

  const togglePreview = () => {
    dispatch({
      type: "setUi",
      ui: {
        previewMode: previewMode === "interactive" ? "edit" : "interactive",
        leftSideBarVisible: previewMode === "interactive" ? true : false,
        rightSideBarVisible: previewMode === "interactive" ? true : false,
      },
    });
  };

  return (
    <>
      <Button onClick={togglePreview} variant="secondary">
        <Icon icon={previewMode === "interactive" ? "lucide:pen" : "lucide:eye"} className="size-4"></Icon>{previewMode === "interactive" ? "Edit" : "Preview"}
      </Button>
      {children}
    </>
  );
}
</file>

<file path="app/puck/page.tsx">
export { default, generateMetadata, dynamic } from "./[...puckPath]/page";
</file>

<file path="app/sections/footer.tsx">
import { ComponentConfig } from "@measured/puck";
import { Icon } from "@iconify/react";

export const Footer: ComponentConfig = {
    label: "Footer",
    fields: {
        bgColor: {
            label: "Background Color",
            labelIcon: <Icon icon="lucide:paint-bucket" />,
            type: "select",
            options: [
                { label: "Light", value: "bg-light" },
                { label: "Dark", value: "bg-dark" },
                { label: "Muted", value: "bg-muted" },
                { label: "Theme", value: "bg-theme" },
            ],
        },
        text: {
            label: "Text",
            labelIcon: <Icon icon="lucide:type" />,
            type: "text",
            placeholder: "Your footer text here",
            contentEditable: true,
        },
    },
    defaultProps: {
        bgColor: "bg-dark",
        text: "© YYYY Your Company. All rights reserved.",
    },
    render: ({ bgColor, text }) => {
        return (
            <footer className={`py-4 flex items-center justify-around ${bgColor}`}>
                <p className="text-slate-50">{text}</p>
            </footer>
        )
    },
}
</file>

<file path="app/sections/hero.tsx">
import { ComponentConfig } from "@measured/puck";
import { Icon } from "@iconify/react";

export const Hero: ComponentConfig = {
    label: "Hero",
    fields: {
        bgColor: {
            label: "Background Color",
            labelIcon: <Icon icon="lucide:paint-bucket" />,
            type: "select",
            options: [
                { label: "light", value: "bg-light" },
                { label: "dark", value: "bg-dark" },
                { label: "Muted", value: "bg-muted" },
                { label: "Theme", value: "bg-theme" },
            ],
        },
        content: {
            label: "Content",
            labelIcon: <Icon icon="lucide:captions" />,
            type: "object",
            objectFields: {
                title: {
                    label: "Headline",
                    labelIcon: <Icon icon="lucide:heading" />,
                    type: "text",
                    placeholder: "Your Hero Title",
                    contentEditable: true,
                },
                subline: {
                    label: "Subline",
                    labelIcon: <Icon icon="lucide:type" />,
                    type: "textarea",
                    placeholder: "Your Hero Subline",
                    contentEditable: true,
                },
                imgUrl: {
                    label: "Image URL",
                    labelIcon: <Icon icon="lucide:image" />,
                    type: "text",
                    placeholder: "Paste image URL here",
                },
            },
        },
    },
    defaultProps: {
        bgColor: "bg-blue-50",
        content: {
            title: "Welcome to Our Site",
            subline: "Discover amazing content and features",
            imgUrl: "https://raw.githubusercontent.com/alan-crts/shadcn-iconpicker/refs/heads/main/public/preview.gif",
        },
    },
    render: ({ bgColor, content, imgUrl }) => {
        return (
            <div className={`pt-30 text-center overflow-hidden ${bgColor}`}>
                <div className="container">
                    <h1>{content.title}</h1>
                    {content.subline && <p className="text-2xl">{content.subline}</p>}
                    {content.imgUrl && <img className="mx-auto mt-20 rounded-t-xl shadow-2xl" src={content.imgUrl} alt={`${content.title} hero image`} />}
                </div>
            </div>
        )
    },
}
</file>

<file path="app/sections/stats.tsx">
import { ComponentConfig } from "@measured/puck";
import { Icon } from "@iconify/react";

export const Stats: ComponentConfig = {
    label: "Stats",
    fields: {
        content: {
            type: "slot",
            allow: ["PuckCard"],
        },
        bgColor: {
            label: "Background Color",
            labelIcon: <Icon icon="lucide:paint-bucket" />,
            type: "select",
            options: [
                { label: "None", value: "bg-transparent" },
                { label: "Light", value: "bg-light" },
                { label: "Dark", value: "bg-dark" },
                { label: "Muted", value: "bg-muted" },
                { label: "Theme", value: "bg-theme" },
            ],
        },
        anchorId: {
            label: "ID",
            labelIcon: <Icon icon="lucide:hash" />,
            type: "text",
        },
        intro: {
            label: "Introduction",
            labelIcon: <Icon icon="lucide:captions" />,
            type: "object",
            objectFields: {
                title: {
                    label: "Headline",
                    labelIcon: <Icon icon="lucide:heading" />,
                    type: "text",
                    contentEditable: true,
                },
                subline: {
                    label: "Subline",
                    labelIcon: <Icon icon="lucide:type" />,
                    type: "textarea",
                    contentEditable: true,
                },
            }
        },
    },
    defaultProps: {
        bgColor: "bg-transparent",
        anchorId: "stats",
        intro: {
            title: "Trusted by thousands of users worldwide",
            subline: "Lorem ipsum, dolor sit amet consectetur adipisicing elit. Maiores impedit perferendis suscipit eaque, iste dolor cupiditate blanditiis ratione.",
        },
        content: [
            {
                type: "PuckCard",
                props: {
                    type: "icon",
                    bgColor: "bg-white",
                    imgUrl: "https://mockmind-api.uifaces.co/content/abstract/50.jpg",
                    icon: "lucide:info",
                    title: "XX",
                    description: "Amazing statistic 1",
                },
            },
            {
                type: "PuckCard",
                props: {
                    type: "icon",
                    bgColor: "bg-white",
                    imgUrl: "https://mockmind-api.uifaces.co/content/abstract/49.jpg",
                    icon: "lucide:info",
                    title: "XX",
                    description: "Amazing statistic 2",
                },
            },
            {
                type: "PuckCard",
                props: {
                    type: "icon",
                    bgColor: "bg-white",
                    imgUrl: "https://mockmind-api.uifaces.co/content/abstract/47.jpg",
                    icon: "lucide:info",
                    title: "XX",
                    description: "Amazing statistic 3",
                },
            },
        ],
    },
    render: ({ bgColor, anchorId, intro, content: Content }) => {
        return (
            <section id={anchorId} className={`py-30 ${bgColor}`}>
                <div className="container grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6">
                    <div className="max-w-4xl">
                        <h2>{intro.title}</h2>
                        {intro.subline && <p className="text-2xl mb-12">{intro.subline}</p>}
                    </div>
                    <Content className="grid grid-cols-12 *:[&:nth-child(4n-3)]:col-span-7 *:[&:nth-child(4n-2)]:col-span-5 *:[&:nth-child(4n-1)]:col-span-5 *:[&:nth-child(4n-1)]:last:col-span-12 *:[&:nth-child(4n)]:col-span-7 gap-4 md:gap-6" />
                </div>
            </section>
        )
    },
}
</file>

<file path="app/sections/team.tsx">
import { ComponentConfig } from "@measured/puck";
import { Icon } from "@iconify/react";

export const Team: ComponentConfig = {
    label: "Team",
    fields: {
        content: {
            type: "slot",
            allow: ["PuckCard"],
        },
        bgColor: {
            label: "Background Color",
            labelIcon: <Icon icon="lucide:paint-bucket" />,
            type: "select",
            options: [
                { label: "None", value: "bg-transparent" },
                { label: "Light", value: "bg-light" },
                { label: "Dark", value: "bg-dark" },
                { label: "Muted", value: "bg-muted" },
                { label: "Theme", value: "bg-theme" },
            ],
        },
        anchorId: {
            label: "ID",
            labelIcon: <Icon icon="lucide:hash" />,
            type: "text",
        },
        intro: {
            label: "Introduction",
            labelIcon: <Icon icon="lucide:captions" />,
            type: "object",
            objectFields: {
                title: {
                    label: "Headline",
                    labelIcon: <Icon icon="lucide:heading" />,
                    type: "text",
                    contentEditable: true,
                },
                subline: {
                    label: "Subline",
                    labelIcon: <Icon icon="lucide:type" />,
                    type: "textarea",
                    contentEditable: true,
                },
            }
        },
    },
    defaultProps: {
        bgColor: "bg-transparent",
        anchorId: "team",
        intro: {
            title: "Team member introduction",
            subline: "Our team is made up of talented individuals who are passionate about what they do.",
        },
        content: [
            {
                type: "PuckCard",
                props: {
                    type: "image",
                    bgColor: "bg-white",
                    imgUrl: "https://mockmind-api.uifaces.co/content/abstract/50.jpg",
                    icon: "lucide:info",
                    title: "Card Title",
                    description: "This is a brief description of the card content.",
                },
            },
            {
                type: "PuckCard",
                props: {
                    type: "image",
                    bgColor: "bg-white",
                    imgUrl: "https://mockmind-api.uifaces.co/content/abstract/49.jpg",
                    icon: "lucide:info",
                    title: "Card Title",
                    description: "This is a brief description of the card content.",
                },
            },
            {
                type: "PuckCard",
                props: {
                    type: "image",
                    bgColor: "bg-white",
                    imgUrl: "https://mockmind-api.uifaces.co/content/abstract/47.jpg",
                    icon: "lucide:info",
                    title: "Card Title",
                    description: "This is a brief description of the card content.",
                },
            },
        ],
    },
    render: ({ bgColor, anchorId, intro, content: Content }) => {
        return (
            <section id={anchorId} className={`py-30 ${bgColor}`}>
                <div className="container">
                    <div className="max-w-4xl">
                        <h2>{intro.title}</h2>
                        {intro.subline && <p className="text-2xl">{intro.subline}</p>}
                    </div>
                    <Content className={`grid grid-cols-[repeat(auto-fit,_minmax(240px,_1fr))] gap-4 md:gap-6 mt-12`} />
                </div>
            </section>
        )
    },
}
</file>

<file path="app/page.tsx">
export { default, generateMetadata } from "./[...puckPath]/page";
</file>

<file path="app/root.js">
import { Icon } from "@iconify/react";

export const Root = {
    fields: {
        title: {
            label: "Page Title",
            labelIcon: <Icon icon="lucide:type" />,
            type: "text",
            placeholder: "Set your page title here",
        },
        description: {
            label: "Meta Description",
            labelIcon: <Icon icon="lucide:type" />,
            type: "textarea",
            placeholder: "Add a <meta> description for SEO",
        },
        url: {
            label: "Page URL",
            labelIcon: <Icon icon="lucide:link" />,
            type: "text",
            placeholder: "https://example.com/",
        },
        imgUrl: {
            label: "Meta image URL",
            labelIcon: <Icon icon="lucide:image" />,
            type: "text",
            placeholder: "https://example.com/meta-img.jpg",
        },
    },
    render: ({ children, title, description, url, imgUrl }) => {
        return (
            <>
                <head>
                    {/* Basics */}
                    <meta charSet="utf-8" />
                    <meta name="viewport" content="width=device-width, initial-scale=1" />
                    {/* Basic SEO Meta Tags */}
                    <title>{title}</title>
                    <meta name="title" content={title} />
                    <meta name="description" content={description} />
                    {/* Open Graph / Facebook */}
                    <meta property="og:type" content="website" />
                    <meta property="og:url" content={url} />
                    <meta property="og:title" content={title} />
                    <meta property="og:description" content={description} />
                    <meta property="og:image" content={imgUrl} />
                    {/* X / Twitter */}
                    <meta property="twitter:card" content="summary_large_image" />
                    <meta property="twitter:url" content={url} />
                    <meta property="twitter:title" content={title} />
                    <meta property="twitter:description" content={description} />
                    <meta property="twitter:image" content={imgUrl} />
                    {/* Google Fonts */}
                    <link rel="preconnect" href="https://fonts.googleapis.com" />
                    <link rel="preconnect" href="https://fonts.gstatic.com" />
                    <link href="https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,400;0,700;1,400;1,700&family=Poppins:ital,wght@0,600;1,600&display=swap" rel="stylesheet" />
                </head>
                <body>{children}</body>
            </>
        );
    },
}
</file>

<file path="lib/get-page.ts">
import { Data } from "@measured/puck";
import fs from "fs";

// Replace with call to your database
export const getPage = (path: string) => {
  const allData: Record<string, Data> | null = fs.existsSync("database.json")
    ? JSON.parse(fs.readFileSync("database.json", "utf-8"))
    : null;

  return allData ? allData[path] : null;
};
</file>

<file path="tsconfig/base.json">
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Default",
  "compilerOptions": {
    "composite": false,
    "declaration": true,
    "declarationMap": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "inlineSources": false,
    "isolatedModules": true,
    "moduleResolution": "node",
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "preserveWatchOutput": true,
    "skipLibCheck": true,
    "strict": true
  },
  "exclude": ["node_modules"]
}
</file>

<file path="tsconfig/nextjs.json">
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Next.js",
  "extends": "./base.json",
  "compilerOptions": {
    "plugins": [{ "name": "next" }],
    "allowJs": true,
    "declaration": false,
    "declarationMap": false,
    "incremental": true,
    "jsx": "preserve",
    "lib": ["dom", "dom.iterable", "esnext"],
    "module": "esnext",
    "noEmit": true,
    "resolveJsonModule": true,
    "strict": false,
    "target": "es5"
  },
  "include": ["src", "next-env.d.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="middleware.ts">
import { NextResponse } from "next/server";

import type { NextRequest } from "next/server";

export async function middleware(req: NextRequest) {
  const res = NextResponse.next();

  if (req.method === "GET") {
    // Rewrite routes that match "/[...puckPath]/edit" to "/puck/[...puckPath]"
    if (req.nextUrl.pathname.endsWith("/edit")) {
      const pathWithoutEdit = req.nextUrl.pathname.slice(
        0,
        req.nextUrl.pathname.length - 5
      );
      const pathWithEditPrefix = `/puck${pathWithoutEdit}`;

      return NextResponse.rewrite(new URL(pathWithEditPrefix, req.url));
    }

    // Disable "/puck/[...puckPath]"
    if (req.nextUrl.pathname.startsWith("/puck")) {
      return NextResponse.redirect(new URL("/", req.url));
    }
  }

  return res;
}
</file>

<file path="next.config.js">
module.exports = {
  reactStrictMode: true,
};
</file>

<file path="postcss.config.mjs">
const config = { plugins: { "@tailwindcss/postcss": {}, }, }; export default config;
</file>

<file path="repomix-output-bgebelein-puck-page-builder.xml">
This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where security check has been disabled.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Security check has been disabled - content may contain sensitive information
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
app/
  [...puckPath]/
    client.tsx
    page.tsx
  components/
    bodytext.tsx
    button.tsx
    callout.tsx
    card.tsx
    collapsible.tsx
    header.tsx
    headline.tsx
    section.tsx
    spacer.tsx
    stack.tsx
  fields/
    slider.js
    toggle.js
  puck/
    [...puckPath]/
      client.tsx
      page.tsx
    api/
      route.ts
    custom/
      headerActions.tsx
    page.tsx
  sections/
    faq.tsx
    footer.tsx
    hero.tsx
    stats.tsx
    team.tsx
  layout.tsx
  page.tsx
  root.js
  styles.css
lib/
  get-page.ts
tsconfig/
  base.json
  nextjs.json
.gitignore
database.json
middleware.ts
next-env.d.ts
next.config.js
package.json
postcss.config.mjs
puck.config.tsx
README.md
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/[...puckPath]/client.tsx">
"use client";

import type { Data } from "@measured/puck";
import { Render } from "@measured/puck";
import config from "../../puck.config";

export function Client({ data }: { data: Data }) {
  return <Render config={config} data={data} />;
}
</file>

<file path="app/[...puckPath]/page.tsx">
/**
 * This file implements a catch-all route that renders the user-facing pages
 * generated by Puck. For any route visited (with exception of other hardcoded
 * pages in /app), it will check your database (via `getPage`) for a Puck page
 * and render it using <Render>.
 *
 * All routes produced by this page are statically rendered using incremental
 * static site generation. After the first visit, the page will be cached as
 * a static file. Subsequent visits will receive the cache. Publishing a page
 * will invalidate the cache as the page is written in /api/puck/route.ts
 */

import { Client } from "./client";
import { notFound } from "next/navigation";
import { Metadata } from "next";
import { getPage } from "../../lib/get-page";

export async function generateMetadata({
  params,
}: {
  params: Promise<{ puckPath: string[] }>;
}): Promise<Metadata> {
  const { puckPath = [] } = await params;
  const path = `/${puckPath.join("/")}`;

  return {
    title: getPage(path)?.root.props?.title,
  };
}

export default async function Page({
  params,
}: {
  params: Promise<{ puckPath: string[] }>;
}) {
  const { puckPath = [] } = await params;
  const path = `/${puckPath.join("/")}`;
  const data = getPage(path);

  if (!data) {
    return notFound();
  }

  return <Client data={data} />;
}

// Force Next.js to produce static pages: https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config#dynamic
// Delete this if you need dynamic rendering, such as access to headers or cookies
export const dynamic = "force-static";
</file>

<file path="app/components/bodytext.tsx">
import { ComponentConfig } from "@measured/puck";
import { Icon } from "@iconify/react";

export const Bodytext: ComponentConfig = {
  label: "Text",
  fields: {
    text: {
      label: "Text",
      labelIcon: <Icon icon="lucide:type" />,
      type: "textarea",
      placeholder: "Enter your text here",
      contentEditable: true,
    },
    size: {
      type: "radio",
      label: "Size",
      labelIcon: <Icon icon="lucide:a-large-small" />,
      options: [
        { label: "Large", value: "text-2xl" },
        { label: "Medium", value: "text-xl" },
        { label: "Small", value: "text-lg" },
      ],
    },
    alignment: {
      type: "radio",
      label: "Alignment",
      labelIcon: <Icon icon="lucide:align-left" />,
      options: [
        { label: "Start", value: "text-left" },
        { label: "Center", value: "text-center" },
        { label: "End", value: "text-right" },
      ],
    },
  },
  defaultProps: {
    text: "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.",
    size: "text-xl",
    alignment: "text-left",
  },
  render: ({ text, size, alignment }) => {
    return <p className={`${size} ${alignment}`}>{text}</p>;
  }
}
</file>

<file path="app/components/button.tsx">
import { ComponentConfig } from "@measured/puck";
import { Icon } from "@iconify/react";

const btnStyles = {
    base: "inline-flex gap-3 items-center px-4 py-3 rounded-xl text-xl font-medium border-2 transition-colors",
    disabled: "disabled:bg-slate-300 disabled:text-slate-500 disabled:cursor-not-allowed",
    themePrimary: "bg-theme text-white border-theme hover:bg-theme-hover hover:border-theme-hover active:bg-theme-active active:border-theme-active",
    themeSecondary: "text-theme hover:bg-theme/10 active:bg-theme/20",
    whitePrimary: "bg-white text-theme border-white hover:bg-white/90 hover:border-white/90 active:bg-white/80 active:border-white/80",
    whiteSecondary: "text-white hover:bg-white/10 active:bg-white/20",
    ghost: "text-theme border-transparent hover:bg-theme/10 active:bg-theme/20",
};

export const Button = ({
    label = "Button",
    url = "#",
    leadingIcon = "",
    trailingIcon = "",
    style = "themePrimary",
}) => {
    return (
        <a className={`${btnStyles.base} ${btnStyles.disabled} ${btnStyles[style]}`} href={url}>
            {leadingIcon && <Icon icon={leadingIcon} />}
            {label}
            {trailingIcon && <Icon icon={trailingIcon} />}
        </a>
    )
}

export const PuckButton: ComponentConfig = {
    label: "Button",
    fields: {
        label: {
            type: "text",
            label: "Label",
            labelIcon: <Icon icon="lucide:type" />,
            placeholder: "Button Label",
            contentEditable: true,
        },
        url: {
            label: "URL",
            labelIcon: <Icon icon="lucide:link" />,
            type: "text"
        },
        style: {
            label: "Style",
            labelIcon: <Icon icon="lucide:chevron-down" />,
            type: "select",
            options: [
                { label: "Theme Primary", value: "themePrimary" },
                { label: "Theme Secondary", value: "themeSecondary" },
                { label: "White Primary", value: "whitePrimary" },
                { label: "White Secondary", value: "whiteSecondary" },
                { label: "Ghost", value: "ghost" },
            ],
        },
        leadingIcon: {
            type: "select",
            label: "Leading Icon",
            labelIcon: <Icon icon="lucide:circle" />,
            options: [
                { label: "None", value: "" },
                { label: "arrow-left", value: "tabler:arrow-narrow-left" },
                { label: "arrow-right", value: "tabler:arrow-narrow-right" },
            ],
        },
        trailingIcon: {
            type: "select",
            label: "Trailing Icon",
            labelIcon: <Icon icon="lucide:circle" />,
            options: [
                { label: "None", value: "" },
                { label: "arrow-left", value: "tabler:arrow-narrow-left" },
                { label: "arrow-right", value: "tabler:arrow-narrow-right" },
            ],
        },
    },
    defaultProps: {
        label: "Button",
        url: "#",
        style: "themePrimary",
    },
    render: ({ url, style, label, trailingIcon, leadingIcon }) => {
        return (
            <Button url={url} style={style} label={label} trailingIcon={trailingIcon} leadingIcon={leadingIcon} />
        );
    },
};
</file>

<file path="app/components/callout.tsx">
import { ComponentConfig } from "@measured/puck";
import { Icon } from "@iconify/react";

const calloutStyles = {
    base: "max-w-2xl mx-auto border-1 rounded-2xl p-4",
    info: "bg-theme/5 border-theme text-theme",
    warning: "bg-amber-50 border-amber-500 text-amber-800",
    error: "bg-rose-50 border-rose-500 text-rose-800",
    success: "bg-emerald-50 border-emerald-500 text-emerald-800",
};

const calloutIcons = {
    info: {
        icon: "lucide:info",
        color: "bg-theme",
    },
    warning: {
        icon: "lucide:alert-triangle",
        color: "bg-amber-500",
    },
    error: {
        icon: "lucide:x-circle",
        color: "bg-rose-500",
    },
    success: {
        icon: "lucide:check-circle",
        color: "bg-emerald-500",
    },
};

export const Callout: ComponentConfig = {
    label: "Callout",
    fields: {
        variant: {
            label: "Variant",
            type: "select",
            labelIcon: <Icon icon="lucide:list-ordered" />,
            options: [
                { label: "Info", value: "info" },
                { label: "Warning", value: "warning" },
                { label: "Error", value: "error" },
                { label: "Success", value: "success" },
            ],
        },
        text: {
            label: "Text",
            labelIcon: <Icon icon="lucide:type" />,
            type: "textarea",
            placeholder: "Your Callout Text",
            contentEditable: true,
        },
    },
    defaultProps: {
        variant: "info",
        text: "This is a callout message to draw attention to important information or actions.",
    },
    render: ({ variant, text }) => {
        return (
            <div className={`flex flex-row items-start gap-5 ${calloutStyles.base} ${calloutStyles[variant]}`}>
                <div className={`text-white p-4 rounded-xl inline-block ${calloutIcons[variant].color}`}>
                    <Icon icon={calloutIcons[variant].icon} />
                </div>
                <p className="">{text}</p>
            </div>
        )
    }
}
</file>

<file path="app/components/card.tsx">
import { ComponentConfig } from "@measured/puck";
import { Icon } from "@iconify/react";

export const Card = ({
    bgColor = "bg-white",
    type = "icon",
    imgUrl = "https://mockmind-api.uifaces.co/content/abstract/50.jpg",
    icon = "lucide:info",
    title = "Card Title",
    description = "This is a brief description of the card content.",
}) => {
    return (
        <div className={`p-8 rounded-2xl shadow-sm ${bgColor}`}>
            {type === 'image' && <img src={imgUrl} alt={`${title} image`} title={`${title} image`} loading="lazy" />}
            {type === 'icon' && (
                <div className="bg-theme text-white p-4 rounded-full inline-block mb-6">
                    <Icon icon={icon} />
                </div>
            )}
            <h3>{title}</h3>
            <p>{description}</p>
        </div>
    )
}

export const PuckCard: ComponentConfig = {
    label: "Card",
    resolveFields: (data) => {
        const fields = {
            title: {
                type: "text" as const,
                label: "Title",
                labelIcon: <Icon icon="lucide:type" />,
                placeholder: "Card Title",
                contentEditable: true,
            },
            description: {
                type: "textarea" as const,
                label: "Description",
                labelIcon: <Icon icon="lucide:type" />,
                placeholder: "Brief description of the card content.",
                contentEditable: true,
            },
            bgColor: {
                label: "Background Color",
                labelIcon: <Icon icon="lucide:paint-bucket" />,
                type: "select" as const,
                options: [
                    { label: "White", value: "bg-white" },
                    { label: "Light", value: "bg-light" },
                    { label: "Dark", value: "bg-dark" },
                    { label: "Muted", value: "bg-muted" },
                    { label: "Theme", value: "bg-theme" },
                ],
            },
            type: {
                type: "radio" as const,
                label: "Card Type",
                labelIcon: <Icon icon="lucide:square-equal" />,
                options: [
                    { label: "Text", value: "text" },
                    { label: "Image", value: "image" },
                    { label: "Icon", value: "icon" },
                ],
            },
        };

        if (data.props.type === "image") {
            return {
                ...fields,
                imgUrl: {
                    label: "Image URL",
                    labelIcon: <Icon icon="lucide:image" />,
                    type: "text" as const,
                    placeholder: "Paste image URL here",
                },
            };
        } else if (data.props.type === "icon") {
            return {
                ...fields,
                icon: {
                    type: "select" as const,
                    label: "Icon",
                    labelIcon: <Icon icon="lucide:circle" />,
                    options: [
                        { label: "None", value: "" },
                        { label: "Info", value: "lucide:info" },
                        { label: "Warning", value: "lucide:triangle-alert" },
                        { label: "Error", value: "lucide:octagon-alert" },
                        { label: "Success", value: "lucide:circle-check" },
                    ],
                },
            };
        } else {
            return {
                ...fields,
            };
        }
    },
    defaultProps: {
        bgColor: "bg-light",
        type: "icon",
        imgUrl: "https://mockmind-api.uifaces.co/content/abstract/50.jpg",
        icon: "lucide:info",
        title: "Card Title",
        description: "This is a brief description of the card content.",
    },
    render: ({ bgColor, type, imgUrl, icon, title, description }) => {
        return (
            <Card
                bgColor={bgColor}
                type={type}
                imgUrl={imgUrl}
                icon={icon}
                title={title}
                description={description}
            />
        )
    }
}
</file>

<file path="app/components/collapsible.tsx">
import { ComponentConfig } from "@measured/puck";
import { Icon } from "@iconify/react";

export const Collapsible: ComponentConfig = {
    label: "Collapsible",
    fields: {
        content: {
            type: "slot",
            allow: ["Bodytext", "PuckButton", "Stack", "Spacer"],
        },
        title: {
            label: "Title",
            labelIcon: <Icon icon="lucide:type" />,
            type: "text",
            placeholder: "Enter your text here",
            contentEditable: true,
        },
        bgColor: {
            label: "Background Color",
            labelIcon: <Icon icon="lucide:paint-bucket" />,
            type: "select",
            options: [
                { label: "White", value: "bg-white" },
                { label: "Light", value: "bg-light" },
                { label: "Dark", value: "bg-dark" },
                { label: "Muted", value: "bg-muted" },
                { label: "Theme", value: "bg-theme" },
            ],
        },
    },
    defaultProps: {
        title: "Collapsible Title",
        bgColor: "bg-light",
        content: [
            {
                type: "Bodytext",
                props: {
                    text: "This is the content of the collapsible section. You can add more details here.",
                    size: "text-xl",
                    alignment: "text-left",
                }
            }
        ]
    },
    render: ({ title, bgColor, puck: {isEditing}, content: Content }) => {
        return (
            <details className={`group p-6 rounded-2xl shadow-sm ${bgColor}`} open={isEditing ? true : false}>
                <summary className="flex items-center justify-between cursor-pointer">
                    <span className="text-2xl font-semibold">{title}</span>
                    <Icon icon="lucide:chevron-down" className="transition-transform group-open:rotate-180" />
                </summary>
                <Content className="flex flex-col gap-4 mt-6" />
            </details>
        );
    }
}
</file>

<file path="app/components/header.tsx">
import { ComponentConfig } from "@measured/puck";
import { Button } from "./button";
import { Icon } from "@iconify/react";

export const Header = ({
    logo,
    navitems = [],
    ctaButton = {
        url: "#",
        style: "themePrimary",
        label: "Label",
        leadingIcon: "lucide:circle",
        trailingIcon: "lucide:circle",
    }
}) => {
    return (
        <header className="bg-white p-4 sticky top-0 z-10 shadow-lg">
            <div className="container flex items-center justify-between">
                {logo && <img className="max-h-12" src={logo} alt="Logo" title="Logo" />}
                <nav>
                    <menu className="flex items-center gap-6">
                        {navitems.map(
                            (item, index) => (
                                <li key={index}>
                                    <a href={item.url}>{item.label}</a>
                                </li>
                            )
                        )}
                    </menu>
                </nav>
                {ctaButton && <Button
                    url={ctaButton.url}
                    style={ctaButton.style}
                    label={ctaButton.label}
                    leadingIcon={ctaButton.leadingIcon}
                    trailingIcon={ctaButton.trailingIcon}
                />}
            </div>
        </header>
    )
}

export const PuckHeader: ComponentConfig = {
    label: "Header",
    fields: {
        logo: {
            label: "Logo URL",
            labelIcon: <Icon icon="lucide:image" />,
            type: "text",
        },
        navitems: {
            type: "array",
            arrayFields: {
                label: {
                    type: "text",
                },
                url: {
                    type: "text",
                },
            },
        },
        button: {
            label: "Button",
            labelIcon: <Icon icon="lucide:captions" />,
            type: "object",
            objectFields: {
                label: {
                    type: "text",
                    label: "Label",
                    labelIcon: <Icon icon="lucide:type" />,
                    placeholder: "Button Label",
                },
                url: {
                    label: "URL",
                    labelIcon: <Icon icon="lucide:link" />,
                    type: "text"
                },
                style: {
                    label: "Style",
                    labelIcon: <Icon icon="lucide:chevron-down" />,
                    type: "select",
                    options: [
                        { label: "Theme Primary", value: "themePrimary" },
                        { label: "Theme Secondary", value: "themeSecondary" },
                        { label: "White Primary", value: "whitePrimary" },
                        { label: "White Secondary", value: "whiteSecondary" },
                        { label: "Ghost", value: "ghost" },
                    ],
                },
                leadingIcon: {
                    type: "select",
                    label: "Leading Icon",
                    labelIcon: <Icon icon="lucide:circle" />,
                    options: [
                        { label: "None", value: "" },
                        { label: "arrow-left", value: "tabler:arrow-narrow-left" },
                        { label: "arrow-right", value: "tabler:arrow-narrow-right" },
                    ],
                },
                trailingIcon: {
                    type: "select",
                    label: "Trailing Icon",
                    labelIcon: <Icon icon="lucide:circle" />,
                    options: [
                        { label: "None", value: "" },
                        { label: "arrow-left", value: "tabler:arrow-narrow-left" },
                        { label: "arrow-right", value: "tabler:arrow-narrow-right" },
                    ],
                },
            }
        }
    },
    defaultProps: {
        logo: "https://cdn.brandfetch.io/idOPDYImH9/theme/dark/logo.svg?c=1bxid64Mup7aczewSAYMX&t=1667644681223",
        navitems: [
            { label: "Home", url: "#" },
            { label: "About", url: "#" },
            { label: "Services", url: "#" },
            { label: "Contact", url: "#" },
        ],
        button: {
            label: "Contact Us",
            url: "#",
            style: "themePrimary",
            leadingIcon: "lucide:phone-call",
            trailingIcon: "",
        }
    },
    permissions: {
        delete: false,
        drag: false,
        duplicate: false,
    },
    render: ({ logo, navitems, button }) => {
        return <Header
            logo={logo}
            navitems={navitems}
            ctaButton={{
                label: button.label,
                url: button.url,
                style: button.style,
                leadingIcon: button.leadingIcon,
                trailingIcon: button.trailingIcon,
            }}
        />;
    }
}
</file>

<file path="app/components/headline.tsx">
import { ComponentConfig } from "@measured/puck";
import { Icon } from "@iconify/react";

export const Headline: ComponentConfig = {
  label: "Headline",
  fields: {
    title: {
      label: "Headline",
      labelIcon: <Icon icon="lucide:heading" />,
      type: "text",
      placeholder: "Enter your headline here",
      contentEditable: true,
    },
    hierarchy: {
      label: "Hierarchy",
      type: "select",
      labelIcon: <Icon icon="lucide:list-ordered" />,
      options: [
        { label: "Headline 1", value: "h1" },
        { label: "Headline 2", value: "h2" },
        { label: "Headline 3", value: "h3" },
        { label: "Headline 4", value: "h4" },
        { label: "Headline 5", value: "h5" },
        { label: "Headline 6", value: "h6" },
      ],
    },
    alignment: {
      type: "radio",
      label: "Alignment",
      labelIcon: <Icon icon="lucide:align-left" />,
      options: [
        { label: "Start", value: "text-left" },
        { label: "Center", value: "text-center" },
        { label: "End", value: "text-right" },
      ],
    },
  },
  defaultProps: {
    title: "Headline",
    hierarchy: "h2",
    alignment: "text-left",
  },
  render: ({ title, hierarchy, alignment }) => {
    switch (hierarchy) {
      case "h1":
        return <h1 className={`${alignment}`}>{title}</h1>;
      case "h2":
        return <h2 className={`${alignment}`}>{title}</h2>;
      case "h3":
        return <h3 className={`${alignment}`}>{title}</h3>;
      case "h4":
        return <h4 className={`${alignment}`}>{title}</h4>;
      case "h5":
        return <h5 className={`${alignment}`}>{title}</h5>;
      case "h6":
        return <h6 className={`${alignment}`}>{title}</h6>;
    }
  }
}
</file>

<file path="app/components/section.tsx">
import { ComponentConfig } from "@measured/puck";
import { Icon } from "@iconify/react";

export const Section: ComponentConfig = {
    label: "Section",
    fields: {
        content: {
            type: "slot",
        },
        bgColor: {
            label: "Background Color",
            labelIcon: <Icon icon="lucide:paint-bucket" />,
            type: "select",
            options: [
                { label: "None", value: "bg-transparent" },
                { label: "Light", value: "bg-light" },
                { label: "Dark", value: "bg-dark" },
                { label: "Muted", value: "bg-muted" },
                { label: "Theme", value: "bg-theme" },
            ],
        },
    },
    defaultProps: {
        bgColor: "bg-transparent",
    },
    render: ({ bgColor, content: Content }) => {
        return (
            <section className={`py-30 ${bgColor}`}>
                <Content className="container" />
            </section>
        );
    },
}
</file>

<file path="app/components/spacer.tsx">
import { Icon } from "@iconify/react";
import { ComponentConfig } from "@measured/puck";

const spacings = {
    1: "size-4",
    2: "size-6",
    3: "size-10",
    4: "size-20",
    5: "size-40",
}

export const Spacer: ComponentConfig = {
    label: "Spacer",
    fields: {
        size: {
            type: "slider",
            label: "Size",
            icon: <Icon icon="lucide:sliders-horizontal" />,
            min: 1,
            max: 5,
            step: 1,
        },
    },
    defaultProps: {
        size: 3,
    },
    render: ({ direction, size }) => {
        return (
            <div className={spacings[size]}></div>
        );
    },
}
</file>

<file path="app/components/stack.tsx">
import { ComponentConfig } from "@measured/puck";
import { Icon } from "@iconify/react";

export const Stack: ComponentConfig = {
    label: "Stack",
    fields: {
        content: {
            type: "slot",
        },
        direction: {
            type: "radio",
            label: "Direction",
            labelIcon: <Icon icon="lucide:move" />,
            options: [
                { label: "Horizontal", value: "flex-row" },
                { label: "Vertical", value: "flex-col" },
            ],
        },
        horizontalAlignment: {
            type: "radio",
            label: "Horizontal Alignment",
            labelIcon: <Icon icon="lucide:align-center-vertical" />,
            options: [
                { label: "Start", value: "justify-start" },
                { label: "Center", value: "justify-center justify-items-center" },
                { label: "End", value: "justify-end" },
            ],
        },
        verticalAlignment: {
            type: "radio",
            label: "Vertical Alignment",
            labelIcon: <Icon icon="lucide:align-center-horizontal" />,
            options: [
                { label: "Start", value: "items-start" },
                { label: "Center", value: "items-center" },
                { label: "End", value: "items-end" },
            ],
        },
        gap: {
            label: "Gap Size",
            labelIcon: <Icon icon="lucide:align-horizontal-space-around" />,
            type: "select",
            options: [
                { label: "None", value: "gap-0" },
                { label: "XS", value: "gap-1" },
                { label: "SM", value: "gap-2" },
                { label: "MD", value: "gap-4" },
                { label: "LG", value: "gap-6" },
                { label: "XL", value: "gap-10" },
                { label: "2XL", value: "gap-20" },
            ],
        },
    },
    defaultProps: {
        direction: "flex-row",
        verticalAlignment: "items-center",
        horizontalAlignment: "justify-center justify-items-center",
        gap: "gap-4",
    },
    render: ({ direction, horizontalAlignment, verticalAlignment, gap, content: Content }) => {
        return (
            <Content className={`flex flex-wrap *:grow *:basis-0 ${direction} ${horizontalAlignment} ${verticalAlignment} ${gap}`} />
        );
    },
}
</file>

<file path="app/fields/slider.js">
import { FieldLabel } from "@measured/puck";

export const puckSlider = ({ field, onChange, value }) => (
    <FieldLabel label={field.label} icon={field.icon}>
        <input
            type="range"
            min={field.min}
            max={field.max}
            step={field.step}
            defaultValue={value}
            name={field.label}
            onChange={(e) => onChange(e.currentTarget.value)}
        />
    </FieldLabel >
)
</file>

<file path="app/fields/toggle.js">
import { FieldLabel } from "@measured/puck";

export const puckToggle = ({ field, onChange, value }) => (
    <FieldLabel label={field.label} icon={field.icon}>
        <input
            type="checkbox"
            defaultValue={value}
            name={field.label}
            onChange={(e) => onChange(e.currentTarget.value)}
            checked={value}
        />
    </FieldLabel>
)
</file>

<file path="app/puck/[...puckPath]/client.tsx">
"use client";

import type { Data } from "@measured/puck";
import { Puck } from "@measured/puck";
import config from "../../../puck.config";
import { Icon } from "@iconify/react";
import { puckSlider } from "../../fields/slider";
import { puckToggle } from "../../fields/toggle";
import { headerActions } from "../custom/headerActions";

export function Client({ path, data }: { path: string; data: Partial<Data> }) {
  return (
    <Puck
      config={config}
      data={data}
      overrides={{
        fieldTypes: {
          slider: puckSlider,
          toggle: puckToggle,
        },
        headerActions: headerActions,
      }}
      viewports={[
        {
          width: 480,
          height: "auto",
          label: "SM",
          icon: <Icon icon="tabler:device-mobile" />,
        },
        {
          width: 768,
          height: "auto",
          label: "MD",
          icon: <Icon icon="tabler:device-mobile-rotated" />,
        },
        {
          width: 1024,
          height: "auto",
          label: "LG",
          icon: <Icon icon="tabler:device-tablet" />,
        },
        {
          width: 1280,
          height: "auto",
          label: "XL",
          icon: <Icon icon="tabler:device-laptop" />,
        },
        {
          width: "100%" as unknown as number,
          height: "auto",
          label: "2XL",
          icon: <Icon icon="tabler:device-desktop" />,
        },
      ]}
      onPublish={async (data) => {
        await fetch("/puck/api", {
          method: "post",
          body: JSON.stringify({ data, path }),
        });
      }}
    />
  );
}
</file>

<file path="app/puck/[...puckPath]/page.tsx">
/**
 * This file implements a *magic* catch-all route that renders the Puck editor.
 *
 * This route exposes /puck/[...puckPath], but is disabled by middleware.ts. The middleware
 * then rewrites all URL requests ending in `/edit` to this route, allowing you to visit any
 * page in your application and add /edit to the end to spin up a Puck editor.
 *
 * This approach enables public pages to be statically rendered whilst the /puck route can
 * remain dynamic.
 *
 * NB this route is public, and you will need to add authentication
 */

import "@measured/puck/puck.css";
import { Client } from "./client";
import { Metadata } from "next";
import { getPage } from "../../../lib/get-page";

export async function generateMetadata({
  params,
}: {
  params: Promise<{ puckPath: string[] }>;
}): Promise<Metadata> {
  const { puckPath = [] } = await params;
  const path = `/${puckPath.join("/")}`;

  return {
    title: "Puck: " + path,
  };
}

export default async function Page({
  params,
}: {
  params: Promise<{ puckPath: string[] }>;
}) {
  const { puckPath = [] } = await params;
  const path = `/${puckPath.join("/")}`;
  const data = getPage(path);

  return <Client path={path} data={data || {}} />;
}

export const dynamic = "force-dynamic";
</file>

<file path="app/puck/api/route.ts">
import { revalidatePath } from "next/cache";
import { NextResponse } from "next/server";
import fs from "fs";

export async function POST(request: Request) {
  const payload = await request.json();

  const existingData = JSON.parse(
    fs.existsSync("database.json")
      ? fs.readFileSync("database.json", "utf-8")
      : "{}"
  );

  const updatedData = {
    ...existingData,
    [payload.path]: payload.data,
  };

  fs.writeFileSync("database.json", JSON.stringify(updatedData));

  // Purge Next.js cache
  revalidatePath(payload.path);

  return NextResponse.json({ status: "ok" });
}
</file>

<file path="app/puck/custom/headerActions.tsx">
import { createUsePuck, Button } from "@measured/puck";
import { Icon } from "@iconify/react";

export function headerActions({ children }) {
  const usePuck = createUsePuck();
  const dispatch = usePuck((s) => s.dispatch);
  const previewMode = usePuck((s) => s.appState.ui.previewMode);

  const togglePreview = () => {
    dispatch({
      type: "setUi",
      ui: {
        previewMode: previewMode === "interactive" ? "edit" : "interactive",
        leftSideBarVisible: previewMode === "interactive" ? true : false,
        rightSideBarVisible: previewMode === "interactive" ? true : false,
      },
    });
  };

  return (
    <>
      <Button onClick={togglePreview} variant="secondary">
        <Icon icon={previewMode === "interactive" ? "lucide:pen" : "lucide:eye"} className="size-4"></Icon>{previewMode === "interactive" ? "Edit" : "Preview"}
      </Button>
      {children}
    </>
  );
}
</file>

<file path="app/puck/page.tsx">
export { default, generateMetadata, dynamic } from "./[...puckPath]/page";
</file>

<file path="app/sections/faq.tsx">
import { ComponentConfig } from "@measured/puck";
import { Icon } from "@iconify/react";

export const Faq: ComponentConfig = {
    label: "FAQ",
    fields: {
        content: {
            type: "slot",
            allow: ["Collapsible"],
        },
        bgColor: {
            label: "Background Color",
            labelIcon: <Icon icon="lucide:paint-bucket" />,
            type: "select",
            options: [
                { label: "None", value: "bg-transparent" },
                { label: "Light", value: "bg-light" },
                { label: "Dark", value: "bg-dark" },
                { label: "Muted", value: "bg-muted" },
                { label: "Theme", value: "bg-theme" },
            ],
        },
        anchorId: {
            label: "ID",
            labelIcon: <Icon icon="lucide:hash" />,
            type: "text",
        },
        intro: {
            label: "Introduction",
            labelIcon: <Icon icon="lucide:captions" />,
            type: "object",
            objectFields: {
                title: {
                    label: "Headline",
                    labelIcon: <Icon icon="lucide:heading" />,
                    type: "text",
                    contentEditable: true,
                },
                subline: {
                    label: "Subline",
                    labelIcon: <Icon icon="lucide:type" />,
                    type: "textarea",
                    contentEditable: true,
                },
            }
        },
    },
    defaultProps: {
        bgColor: "bg-transparent",
        anchorId: "faq",
        intro: {
            title: "Frequently Asked Questions",
            subline: "Here are some common questions and answers to help you understand our services better.",
        },
        content: [
            {
                type: "Collapsible",
                props: {
                    title: "Question 1",
                    bgColor: "bg-light",
                    content: [
                        {
                            type: "Bodytext",
                            props: {
                                text: "This is the answer to question 1. It provides detailed information about the topic.",
                                size: "text-xl",
                                alignment: "text-left",
                            }
                        }
                    ]
                },
            },
            {
                type: "Collapsible",
                props: {
                    title: "Question 2",
                    bgColor: "bg-light",
                    content: [
                        {
                            type: "Bodytext",
                            props: {
                                text: "This is the answer to question 2. It provides detailed information about the topic.",
                                size: "text-xl",
                                alignment: "text-left",
                            }
                        }
                    ]
                },
            },
            {
                type: "Collapsible",
                props: {
                    title: "Question 3",
                    bgColor: "bg-light",
                    content: [
                        {
                            type: "Bodytext",
                            props: {
                                text: "This is the answer to question 3. It provides detailed information about the topic.",
                                size: "text-xl",
                                alignment: "text-left",
                            }
                        }
                    ]
                },
            },
        ],
    },
    render: ({ bgColor, anchorId, intro, content: Content }) => {
        return (
            <section id={anchorId} className={`py-30 ${bgColor}`}>
                <div className="container">
                    <div className="max-w-4xl">
                        <h2>{intro.title}</h2>
                        {intro.subline && <p className="text-2xl mb-12">{intro.subline}</p>}
                    </div>
                    <Content className="flex flex-col gap-4 md:gap-6" />
                </div>
            </section>
        )
    },
}
</file>

<file path="app/sections/footer.tsx">
import { ComponentConfig } from "@measured/puck";
import { Icon } from "@iconify/react";

export const Footer: ComponentConfig = {
    label: "Footer",
    fields: {
        bgColor: {
            label: "Background Color",
            labelIcon: <Icon icon="lucide:paint-bucket" />,
            type: "select",
            options: [
                { label: "Light", value: "bg-light" },
                { label: "Dark", value: "bg-dark" },
                { label: "Muted", value: "bg-muted" },
                { label: "Theme", value: "bg-theme" },
            ],
        },
        text: {
            label: "Text",
            labelIcon: <Icon icon="lucide:type" />,
            type: "text",
            placeholder: "Your footer text here",
            contentEditable: true,
        },
    },
    defaultProps: {
        bgColor: "bg-dark",
        text: "© YYYY Your Company. All rights reserved.",
    },
    render: ({ bgColor, text }) => {
        return (
            <footer className={`py-4 flex items-center justify-around ${bgColor}`}>
                <p className="text-slate-50">{text}</p>
            </footer>
        )
    },
}
</file>

<file path="app/sections/hero.tsx">
import { ComponentConfig } from "@measured/puck";
import { Icon } from "@iconify/react";

export const Hero: ComponentConfig = {
    label: "Hero",
    fields: {
        bgColor: {
            label: "Background Color",
            labelIcon: <Icon icon="lucide:paint-bucket" />,
            type: "select",
            options: [
                { label: "light", value: "bg-light" },
                { label: "dark", value: "bg-dark" },
                { label: "Muted", value: "bg-muted" },
                { label: "Theme", value: "bg-theme" },
            ],
        },
        content: {
            label: "Content",
            labelIcon: <Icon icon="lucide:captions" />,
            type: "object",
            objectFields: {
                title: {
                    label: "Headline",
                    labelIcon: <Icon icon="lucide:heading" />,
                    type: "text",
                    placeholder: "Your Hero Title",
                    contentEditable: true,
                },
                subline: {
                    label: "Subline",
                    labelIcon: <Icon icon="lucide:type" />,
                    type: "textarea",
                    placeholder: "Your Hero Subline",
                    contentEditable: true,
                },
                imgUrl: {
                    label: "Image URL",
                    labelIcon: <Icon icon="lucide:image" />,
                    type: "text",
                    placeholder: "Paste image URL here",
                },
            },
        },
    },
    defaultProps: {
        bgColor: "bg-blue-50",
        content: {
            title: "Welcome to Our Site",
            subline: "Discover amazing content and features",
            imgUrl: "https://raw.githubusercontent.com/alan-crts/shadcn-iconpicker/refs/heads/main/public/preview.gif",
        },
    },
    render: ({ bgColor, content, imgUrl }) => {
        return (
            <div className={`pt-30 text-center overflow-hidden ${bgColor}`}>
                <div className="container">
                    <h1>{content.title}</h1>
                    {content.subline && <p className="text-2xl">{content.subline}</p>}
                    {content.imgUrl && <img className="mx-auto mt-20 rounded-t-xl shadow-2xl" src={content.imgUrl} alt={`${content.title} hero image`} />}
                </div>
            </div>
        )
    },
}
</file>

<file path="app/sections/stats.tsx">
import { ComponentConfig } from "@measured/puck";
import { Icon } from "@iconify/react";

export const Stats: ComponentConfig = {
    label: "Stats",
    fields: {
        content: {
            type: "slot",
            allow: ["PuckCard"],
        },
        bgColor: {
            label: "Background Color",
            labelIcon: <Icon icon="lucide:paint-bucket" />,
            type: "select",
            options: [
                { label: "None", value: "bg-transparent" },
                { label: "Light", value: "bg-light" },
                { label: "Dark", value: "bg-dark" },
                { label: "Muted", value: "bg-muted" },
                { label: "Theme", value: "bg-theme" },
            ],
        },
        anchorId: {
            label: "ID",
            labelIcon: <Icon icon="lucide:hash" />,
            type: "text",
        },
        intro: {
            label: "Introduction",
            labelIcon: <Icon icon="lucide:captions" />,
            type: "object",
            objectFields: {
                title: {
                    label: "Headline",
                    labelIcon: <Icon icon="lucide:heading" />,
                    type: "text",
                    contentEditable: true,
                },
                subline: {
                    label: "Subline",
                    labelIcon: <Icon icon="lucide:type" />,
                    type: "textarea",
                    contentEditable: true,
                },
            }
        },
    },
    defaultProps: {
        bgColor: "bg-transparent",
        anchorId: "stats",
        intro: {
            title: "Trusted by thousands of users worldwide",
            subline: "Lorem ipsum, dolor sit amet consectetur adipisicing elit. Maiores impedit perferendis suscipit eaque, iste dolor cupiditate blanditiis ratione.",
        },
        content: [
            {
                type: "PuckCard",
                props: {
                    type: "icon",
                    bgColor: "bg-white",
                    imgUrl: "https://mockmind-api.uifaces.co/content/abstract/50.jpg",
                    icon: "lucide:info",
                    title: "XX",
                    description: "Amazing statistic 1",
                },
            },
            {
                type: "PuckCard",
                props: {
                    type: "icon",
                    bgColor: "bg-white",
                    imgUrl: "https://mockmind-api.uifaces.co/content/abstract/49.jpg",
                    icon: "lucide:info",
                    title: "XX",
                    description: "Amazing statistic 2",
                },
            },
            {
                type: "PuckCard",
                props: {
                    type: "icon",
                    bgColor: "bg-white",
                    imgUrl: "https://mockmind-api.uifaces.co/content/abstract/47.jpg",
                    icon: "lucide:info",
                    title: "XX",
                    description: "Amazing statistic 3",
                },
            },
        ],
    },
    render: ({ bgColor, anchorId, intro, content: Content }) => {
        return (
            <section id={anchorId} className={`py-30 ${bgColor}`}>
                <div className="container grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6">
                    <div className="max-w-4xl">
                        <h2>{intro.title}</h2>
                        {intro.subline && <p className="text-2xl mb-12">{intro.subline}</p>}
                    </div>
                    <Content className="grid grid-cols-12 *:[&:nth-child(4n-3)]:col-span-7 *:[&:nth-child(4n-2)]:col-span-5 *:[&:nth-child(4n-1)]:col-span-5 *:[&:nth-child(4n-1)]:last:col-span-12 *:[&:nth-child(4n)]:col-span-7 gap-4 md:gap-6" />
                </div>
            </section>
        )
    },
}
</file>

<file path="app/sections/team.tsx">
import { ComponentConfig } from "@measured/puck";
import { Icon } from "@iconify/react";

export const Team: ComponentConfig = {
    label: "Team",
    fields: {
        content: {
            type: "slot",
            allow: ["PuckCard"],
        },
        bgColor: {
            label: "Background Color",
            labelIcon: <Icon icon="lucide:paint-bucket" />,
            type: "select",
            options: [
                { label: "None", value: "bg-transparent" },
                { label: "Light", value: "bg-light" },
                { label: "Dark", value: "bg-dark" },
                { label: "Muted", value: "bg-muted" },
                { label: "Theme", value: "bg-theme" },
            ],
        },
        anchorId: {
            label: "ID",
            labelIcon: <Icon icon="lucide:hash" />,
            type: "text",
        },
        intro: {
            label: "Introduction",
            labelIcon: <Icon icon="lucide:captions" />,
            type: "object",
            objectFields: {
                title: {
                    label: "Headline",
                    labelIcon: <Icon icon="lucide:heading" />,
                    type: "text",
                    contentEditable: true,
                },
                subline: {
                    label: "Subline",
                    labelIcon: <Icon icon="lucide:type" />,
                    type: "textarea",
                    contentEditable: true,
                },
            }
        },
    },
    defaultProps: {
        bgColor: "bg-transparent",
        anchorId: "team",
        intro: {
            title: "Team member introduction",
            subline: "Our team is made up of talented individuals who are passionate about what they do.",
        },
        content: [
            {
                type: "PuckCard",
                props: {
                    type: "image",
                    bgColor: "bg-white",
                    imgUrl: "https://mockmind-api.uifaces.co/content/abstract/50.jpg",
                    icon: "lucide:info",
                    title: "Card Title",
                    description: "This is a brief description of the card content.",
                },
            },
            {
                type: "PuckCard",
                props: {
                    type: "image",
                    bgColor: "bg-white",
                    imgUrl: "https://mockmind-api.uifaces.co/content/abstract/49.jpg",
                    icon: "lucide:info",
                    title: "Card Title",
                    description: "This is a brief description of the card content.",
                },
            },
            {
                type: "PuckCard",
                props: {
                    type: "image",
                    bgColor: "bg-white",
                    imgUrl: "https://mockmind-api.uifaces.co/content/abstract/47.jpg",
                    icon: "lucide:info",
                    title: "Card Title",
                    description: "This is a brief description of the card content.",
                },
            },
        ],
    },
    render: ({ bgColor, anchorId, intro, content: Content }) => {
        return (
            <section id={anchorId} className={`py-30 ${bgColor}`}>
                <div className="container">
                    <div className="max-w-4xl">
                        <h2>{intro.title}</h2>
                        {intro.subline && <p className="text-2xl">{intro.subline}</p>}
                    </div>
                    <Content className={`grid grid-cols-[repeat(auto-fit,_minmax(240px,_1fr))] gap-4 md:gap-6 mt-12`} />
                </div>
            </section>
        )
    },
}
</file>

<file path="app/layout.tsx">
import "./styles.css";

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="de" className="scroll-smooth">
      <head>
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" />
        <link href="https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,400;0,700;1,400;1,700&family=Poppins:ital,wght@0,600;1,600&display=swap" rel="stylesheet" />
      </head>
      <body>{children}</body>
    </html>
  );
}
</file>

<file path="app/page.tsx">
export { default, generateMetadata } from "./[...puckPath]/page";
</file>

<file path="app/root.js">
import { Icon } from "@iconify/react";

export const Root = {
    fields: {
        title: {
            label: "Page Title",
            labelIcon: <Icon icon="lucide:type" />,
            type: "text",
            placeholder: "Set your page title here",
        },
        description: {
            label: "Meta Description",
            labelIcon: <Icon icon="lucide:type" />,
            type: "textarea",
            placeholder: "Add a <meta> description for SEO",
        },
        url: {
            label: "Page URL",
            labelIcon: <Icon icon="lucide:link" />,
            type: "text",
            placeholder: "https://example.com/",
        },
        imgUrl: {
            label: "Meta image URL",
            labelIcon: <Icon icon="lucide:image" />,
            type: "text",
            placeholder: "https://example.com/meta-img.jpg",
        },
    },
    render: ({ children, title, description, url, imgUrl }) => {
        return (
            <>
                <head>
                    {/* Basics */}
                    <meta charSet="utf-8" />
                    <meta name="viewport" content="width=device-width, initial-scale=1" />
                    {/* Basic SEO Meta Tags */}
                    <title>{title}</title>
                    <meta name="title" content={title} />
                    <meta name="description" content={description} />
                    {/* Open Graph / Facebook */}
                    <meta property="og:type" content="website" />
                    <meta property="og:url" content={url} />
                    <meta property="og:title" content={title} />
                    <meta property="og:description" content={description} />
                    <meta property="og:image" content={imgUrl} />
                    {/* X / Twitter */}
                    <meta property="twitter:card" content="summary_large_image" />
                    <meta property="twitter:url" content={url} />
                    <meta property="twitter:title" content={title} />
                    <meta property="twitter:description" content={description} />
                    <meta property="twitter:image" content={imgUrl} />
                    {/* Google Fonts */}
                    <link rel="preconnect" href="https://fonts.googleapis.com" />
                    <link rel="preconnect" href="https://fonts.gstatic.com" />
                    <link href="https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,400;0,700;1,400;1,700&family=Poppins:ital,wght@0,600;1,600&display=swap" rel="stylesheet" />
                </head>
                <body>{children}</body>
            </>
        );
    },
}
</file>

<file path="app/styles.css">
@import url("https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,400;0,700;1,400;1,700&family=Poppins:ital,wght@0,600;1,600&display=swap");
@import "tailwindcss";

@theme {
  --font-poppins: "Poppins", sans-serif;
  --font-lato: "Lato", sans-serif;
}

@theme static {
  --color-theme: var(--color-blue-700);
  --color-theme-hover: var(--color-blue-600);
  --color-theme-active: var(--color-blue-800);
  --color-muted: var(--color-blue-50);
  --color-light: var(--color-slate-50);
  --color-dark: var(--color-slate-950);
}

@utility container {
  margin: 0 auto;
  padding: 0 1rem;

  @variant md {
    padding: 0 1.5rem;
  }

  @variant xl {
    padding: 0 2rem;
  }

  @variant 2xl {
    max-width: 1280px;
  }
}

@layer components {
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    @apply font-bold font-poppins leading-tight;
  }

  h1 {
    @apply lg:text-6xl text-5xl mb-8;
  }

  h2 {
    @apply lg:text-5xl text-4xl mt-8 mb-6;
  }

  h3 {
    @apply lg:text-4xl text-3xl mt-6 mb-3;
  }

  h4 {
    @apply lg:text-3xl text-2xl mt-3 mb-2;
  }

  h5 {
    @apply lg:text-2xl text-xl mt-2 mb-1;
  }

  h6 {
    @apply lg:text-xl text-lg mt-1 mb-0.5;
  }

  p,
  a,
  label {
    @apply font-lato text-xl leading-normal;
  }

  .iconify {
    @apply inline-block size-6;
  }
}

/* -------------------- Text Colors -------------------- */

.bg-light,
.bg-muted,
.bg-transparent {
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    @apply text-slate-800;
  }

  p,
  label {
    @apply text-slate-600;
  }
}

.bg-dark,
.bg-theme {
  @apply *:text-slate-50;
}
</file>

<file path="lib/get-page.ts">
import { Data } from "@measured/puck";
import fs from "fs";

// Replace with call to your database
export const getPage = (path: string) => {
  const allData: Record<string, Data> | null = fs.existsSync("database.json")
    ? JSON.parse(fs.readFileSync("database.json", "utf-8"))
    : null;

  return allData ? allData[path] : null;
};
</file>

<file path="tsconfig/base.json">
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Default",
  "compilerOptions": {
    "composite": false,
    "declaration": true,
    "declarationMap": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "inlineSources": false,
    "isolatedModules": true,
    "moduleResolution": "node",
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "preserveWatchOutput": true,
    "skipLibCheck": true,
    "strict": true
  },
  "exclude": ["node_modules"]
}
</file>

<file path="tsconfig/nextjs.json">
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Next.js",
  "extends": "./base.json",
  "compilerOptions": {
    "plugins": [{ "name": "next" }],
    "allowJs": true,
    "declaration": false,
    "declarationMap": false,
    "incremental": true,
    "jsx": "preserve",
    "lib": ["dom", "dom.iterable", "esnext"],
    "module": "esnext",
    "noEmit": true,
    "resolveJsonModule": true,
    "strict": false,
    "target": "es5"
  },
  "include": ["src", "next-env.d.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path=".gitignore">
.DS_Store
.env
node_modules
package-lock.json
.next
</file>

<file path="database.json">
{"/":{"root":{"props":{"content":[{"type":"PuckHeader","props":{"id":"header","button":{"label":"Contact us","url":"#","leadingIcon":"tabler:arrow-narrow-left"},"navitems":[{"label":"Home","url":"#"},{"label":"Team","url":"#team"},{"label":"Services","url":"#"},{"label":"FAQ","url":"faq"},{"label":"Contact","url":"#"}],"logo":"https://cdn.brandfetch.io/idOPDYImH9/theme/dark/logo.svg?c=1bxid64Mup7aczewSAYMX&t=1667644681223"}},{"type":"Hero","props":{"bgColor":"bg-theme","content":{"title":"Welcome to Our Site","subline":"Discover amazing content and features","imgUrl":"https://raw.githubusercontent.com/alan-crts/shadcn-iconpicker/refs/heads/main/public/preview.gif"},"id":"Hero-8064acf5-a2da-450f-bfa9-105320ddd0a6"}},{"type":"Section","props":{"content":[{"type":"Callout","props":{"variant":"success","text":"This is a callout message to draw attention to important information or actions.","id":"Callout-8a3c55fc-bd24-419f-aa23-32a75c6d8f88"}}],"bgColor":"bg-transparent","id":"Section-e5b6dad5-5d3b-4fc2-8661-9d48c833aa95"}},{"type":"Stats","props":{"content":[{"type":"PuckCard","props":{"id":"PuckCard-d3c1ce84-a186-47d9-ba39-b8ceb0752e77","type":"icon","bgColor":"bg-light","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/50.jpg","icon":"lucide:info","title":"12K","description":"Active users"}},{"type":"PuckCard","props":{"id":"PuckCard-d922dffc-96ba-4e27-8b42-490c8123af5f","type":"icon","bgColor":"bg-light","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/49.jpg","icon":"lucide:info","title":"99%","description":"Uptime"}},{"type":"PuckCard","props":{"id":"PuckCard-4720572b-9ee2-498d-a14e-1055b975c833","type":"icon","bgColor":"bg-light","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/47.jpg","icon":"lucide:info","title":"12M $","description":"Revenue"}}],"bgColor":"bg-transparent","anchorId":"faq","intro":{"title":"Trusted by thousands of users worldwide","subline":"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Maiores impedit perferendis suscipit eaque, iste dolor cupiditate blanditiis ratione."},"id":"Stats-215853ee-9125-4415-a46d-518d0b23fb69"}},{"type":"Team","props":{"content":[{"type":"PuckCard","props":{"id":"PuckCard-9f43ff6e-aade-429f-9fdc-980ebb3b88f5","type":"image","bgColor":"bg-white","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/50.jpg","icon":"lucide:info","title":"Card Title","description":"This is a brief description of the card content."}},{"type":"PuckCard","props":{"id":"PuckCard-2a89cae4-4b42-432f-bc04-26f18ffb20ba","type":"image","bgColor":"bg-white","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/49.jpg","icon":"lucide:info","title":"Card Title","description":"This is a brief description of the card content."}},{"type":"PuckCard","props":{"id":"PuckCard-96fd939d-932d-4d0b-8ac2-c32fe164eb5e","type":"image","bgColor":"bg-white","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/49.jpg","icon":"lucide:info","title":"Card Title","description":"This is a brief description of the card content."}},{"type":"PuckCard","props":{"id":"PuckCard-eeaefafd-e74d-4f3f-892d-c64afcf22416","type":"image","bgColor":"bg-white","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/49.jpg","icon":"lucide:info","title":"Card Title","description":"This is a brief description of the card content."}}],"bgColor":"bg-muted","intro":{"title":"Team member introduction","subline":"Our team is made up of talented individuals who are passionate about what they do."},"id":"Team-a4155d14-bb55-4ff4-978a-97f3fed3e53b","anchorId":"team"}},{"type":"Faq","props":{"content":[{"type":"Collapsible","props":{"content":[{"type":"Bodytext","props":{"id":"Bodytext-ddcffef8-d2d4-4958-b153-1a4001840ee9","text":"This is the answer to question 1. It provides detailed information about the topic.","size":"text-lg","alignment":"text-left"}},{"type":"Stack","props":{"content":[{"type":"PuckButton","props":{"id":"PuckButton-cfe6f901-2ffc-401e-857b-f7c0e6fbed39","label":"Button","url":"#","style":"themePrimary"}},{"type":"PuckButton","props":{"id":"PuckButton-9488d4c9-6b7b-4af5-98ce-7f49418e6306","label":"Button","url":"#","style":"themeSecondary"}},{"type":"PuckButton","props":{"id":"PuckButton-730e31bd-33ac-4a05-87dc-2d390570a251","label":"Button","url":"#","style":"whitePrimary"}},{"type":"PuckButton","props":{"id":"PuckButton-70f43404-4f4c-4c56-a54f-a07798b00e6d","label":"Button","url":"#","style":"whiteSecondary"}},{"type":"PuckButton","props":{"id":"PuckButton-633e4e92-8ef0-484c-bf48-b98c5f199907","label":"Button","url":"#","style":"ghost"}}],"direction":"grid-cols-[repeat(auto-fit,_minmax(240px,_1fr))]","verticalAlignment":"items-center","horizontalAlignment":"justify-center justify-items-center","gap":"gap-6","id":"Stack-46947577-8e00-43ba-b230-dc78a640ca09"}}],"id":"Collapsible-d491f40b-4b71-4866-81e3-8fac62edc796","title":"Question 1","bgColor":"bg-white"}},{"type":"Collapsible","props":{"content":[{"type":"Bodytext","props":{"id":"Bodytext-e9ac4957-36bf-4177-9297-605e38f83e8e","text":"This is the answer to question 2. It provides detailed information about the topic.","size":"text-lg","alignment":"text-left"}}],"id":"Collapsible-6e5a871f-e408-48b9-9a0d-55723b0df10f","title":"Question 2","bgColor":"bg-white"}},{"type":"Collapsible","props":{"content":[{"type":"Bodytext","props":{"id":"Bodytext-8d55bd8c-ff04-431b-a97b-3247baad8aa5","text":"This is the answer to question 3. It provides detailed information about the topic.","size":"text-lg","alignment":"text-left"}}],"id":"Collapsible-968a6380-3036-440a-8b83-4a9eb705cf50","title":"Question 3","bgColor":"bg-white"}}],"bgColor":"bg-light","anchorId":"faq","intro":{"title":"Frequently Asked Questions","subline":"Here are some common questions and answers to help you understand our services better."},"id":"Faq-ee718b8a-fc59-48ac-ba61-d3a20400aded"}},{"type":"Section","props":{"content":[{"type":"Headline","props":{"title":"Headline","hierarchy":"h1","alignment":"text-left","id":"Headline-8a658ed2-80f8-43b9-a023-e31edd5f1f70"}},{"type":"Bodytext","props":{"text":"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.","size":"text-xl","alignment":"text-left","id":"Bodytext-f1babdf9-1ebb-45a6-a37d-254ec9eb629d"}},{"type":"Spacer","props":{"size":"3","id":"Spacer-d9f082cf-6477-4682-839c-81a5c58ae942"}},{"type":"Stack","props":{"content":[{"type":"PuckCard","props":{"id":"PuckCard-f201ba5a-72ea-4656-a96d-8e59e67f5262","bgColor":"bg-light","type":"icon","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/50.jpg","icon":"lucide:info","title":"Card Title","description":"This is a brief description of the card content."}},{"type":"PuckCard","props":{"id":"PuckCard-52662b34-e210-4116-a790-ae56d049277a","bgColor":"bg-light","type":"icon","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/50.jpg","icon":"lucide:info","title":"Card Title","description":"This is a brief description of the card content."}},{"type":"PuckCard","props":{"id":"PuckCard-3f2033b8-bc44-4a3f-a5d1-27214b2ae2d6","bgColor":"bg-light","type":"icon","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/50.jpg","icon":"lucide:info","title":"Card Title","description":"This is a brief description of the card content. This is a brief description of the card content."}},{"type":"PuckCard","props":{"id":"PuckCard-7f931692-4ab4-44b5-bacf-62a1a032c654","bgColor":"bg-light","type":"icon","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/50.jpg","icon":"lucide:info","title":"Card Title","description":"This is a brief description of the card content."}}],"direction":"flex-row","verticalAlignment":"items-start","horizontalAlignment":"justify-center justify-items-center","gap":"gap-4","id":"Stack-4ce65a8f-b406-4749-8ff2-fc29b007be71"}}],"bgColor":"bg-transparent","id":"Section-c63bb700-512f-4498-94ed-2a614aafac68"}},{"type":"Footer","props":{"bgColor":"bg-dark","text":"© YYYY Your Company. All rights reserved.","id":"Footer-ae82d743-28fc-46b3-8c52-8d046c3ae5ce"}}],"nav":[{"type":"PuckHeader","props":{"id":"header"}},{"type":"Hero","props":{"bgColor":"bg-theme","content":{"title":"Welcome to Our Site","subline":"Discover amazing content and features","imgUrl":"https://raw.githubusercontent.com/alan-crts/shadcn-iconpicker/refs/heads/main/public/preview.gif"},"id":"Hero-d7843c7a-6eb0-460c-b3e6-7a519650b90d"}}],"title":"Page Title","navitems":[{"label":"Nav Item 1","url":"#"},{"label":"Nav Item 2","url":"#"}]}},"content":[{"type":"PuckHeader","props":{"logo":"https://cdn.brandfetch.io/idOPDYImH9/theme/dark/logo.svg?c=1bxid64Mup7aczewSAYMX&t=1667644681223","navitems":[{"label":"Home","url":"#"},{"label":"About","url":"#stats"},{"label":"Team","url":"#team"},{"label":"FAQ","url":"#faq"}],"button":{"label":"Contact Us","url":"#","style":"themePrimary","leadingIcon":"lucide:phone-call","trailingIcon":""},"id":"PuckHeader-cabdb3c1-4178-479a-a605-9a11e7559f36"}},{"type":"Hero","props":{"bgColor":"bg-theme","content":{"title":"Welcome to Our Site","subline":"Discover amazing content and features","imgUrl":"https://raw.githubusercontent.com/alan-crts/shadcn-iconpicker/refs/heads/main/public/preview.gif"},"id":"Hero-931db9ec-e8d6-485c-9d52-fd14a7639b5b"}},{"type":"Stats","props":{"content":[{"type":"PuckCard","props":{"id":"PuckCard-aececadc-3fe1-452a-a374-c97311b3e6a9","type":"icon","bgColor":"bg-light","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/50.jpg","icon":"lucide:info","title":"XX","description":"Amazing statistic 1"}},{"type":"PuckCard","props":{"id":"PuckCard-fe8f47d7-c6f4-4b87-a476-c3d06e97de1e","type":"icon","bgColor":"bg-light","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/49.jpg","icon":"lucide:info","title":"XX","description":"Amazing statistic 2"}},{"type":"PuckCard","props":{"id":"PuckCard-fa6d2770-fdc5-48db-907d-891523a63e9c","type":"icon","bgColor":"bg-light","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/47.jpg","icon":"lucide:info","title":"XX","description":"Amazing statistic 3"}}],"bgColor":"bg-muted","anchorId":"stats","intro":{"title":"Trusted by thousands of users worldwide","subline":"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Maiores impedit perferendis suscipit eaque, iste dolor cupiditate blanditiis ratione."},"id":"Stats-792bccbb-b677-4321-805b-8edb6a945dbd"}},{"type":"Team","props":{"content":[{"type":"PuckCard","props":{"id":"PuckCard-ceecd4be-0154-4821-84b3-4b6da8d1af92","type":"image","bgColor":"bg-light","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/50.jpg","icon":"lucide:info","title":"Card Title","description":"This is a brief description of the card content."}},{"type":"PuckCard","props":{"id":"PuckCard-bfe863ce-96d4-4522-97f9-b28359065dd3","type":"image","bgColor":"bg-light","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/49.jpg","icon":"lucide:info","title":"Card Title","description":"This is a brief description of the card content."}},{"type":"PuckCard","props":{"id":"PuckCard-a2c8cd12-1e7f-4c74-b306-092234b78248","type":"image","bgColor":"bg-light","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/49.jpg","icon":"lucide:info","title":"Card Title","description":"This is a brief description of the card content."}},{"type":"PuckCard","props":{"id":"PuckCard-4c0946f6-af04-4e65-907c-8e41312e84c3","type":"image","bgColor":"bg-light","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/47.jpg","icon":"lucide:info","title":"Card Title","description":"This is a brief description of the card content."}}],"bgColor":"bg-transparent","anchorId":"team","intro":{"title":"Team member introduction","subline":"Our team is made up of talented individuals who are passionate about what they do."},"id":"Team-6ac8d9b6-bd5b-4cbd-b015-e74a36aefcf1"}},{"type":"Faq","props":{"content":[{"type":"Collapsible","props":{"content":[{"type":"Bodytext","props":{"id":"Bodytext-3cf0450b-ecc1-4a23-85ef-7e6cc89b5f20","text":"This is the answer to question 1. It provides detailed information about the topic.","size":"text-xl","alignment":"text-left"}}],"id":"Collapsible-7ee58a76-fc8e-48e2-b63b-01709af756e2","title":"Question 1","bgColor":"bg-light"}},{"type":"Collapsible","props":{"content":[{"type":"Bodytext","props":{"id":"Bodytext-06d61d25-8827-408b-8789-bb495f5e9998","text":"This is the answer to question 2. It provides detailed information about the topic.","size":"text-xl","alignment":"text-left"}}],"id":"Collapsible-069aef9b-0566-46ee-8062-d95b445ba6da","title":"Question 2","bgColor":"bg-light"}},{"type":"Collapsible","props":{"content":[{"type":"Bodytext","props":{"id":"Bodytext-105ae7fe-7081-4247-ac7e-4ec52ebebf5c","text":"This is the answer to question 3. It provides detailed information about the topic.","size":"text-xl","alignment":"text-left"}}],"id":"Collapsible-09b19349-b825-4409-b904-5a67cff3ccf3","title":"Question 3","bgColor":"bg-light"}}],"bgColor":"bg-transparent","anchorId":"faq","intro":{"title":"Frequently Asked Questions","subline":"Here are some common questions and answers to help you understand our services better."},"id":"Faq-d7789ccf-50d1-4061-a513-f3f6fc77fccb"}},{"type":"Footer","props":{"bgColor":"bg-dark","text":"© YYYY Your Company. All rights reserved.","id":"Footer-7cb573eb-bad8-4f43-8492-16ff28f3a149"}}],"zones":{}}}
</file>

<file path="middleware.ts">
import { NextResponse } from "next/server";

import type { NextRequest } from "next/server";

export async function middleware(req: NextRequest) {
  const res = NextResponse.next();

  if (req.method === "GET") {
    // Rewrite routes that match "/[...puckPath]/edit" to "/puck/[...puckPath]"
    if (req.nextUrl.pathname.endsWith("/edit")) {
      const pathWithoutEdit = req.nextUrl.pathname.slice(
        0,
        req.nextUrl.pathname.length - 5
      );
      const pathWithEditPrefix = `/puck${pathWithoutEdit}`;

      return NextResponse.rewrite(new URL(pathWithEditPrefix, req.url));
    }

    // Disable "/puck/[...puckPath]"
    if (req.nextUrl.pathname.startsWith("/puck")) {
      return NextResponse.redirect(new URL("/", req.url));
    }
  }

  return res;
}
</file>

<file path="next-env.d.ts">
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.
</file>

<file path="next.config.js">
module.exports = {
  reactStrictMode: true,
};
</file>

<file path="package.json">
{
  "name": "puck-test",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@measured/puck": "0.20.0",
    "@tailwindcss/postcss": "^4.1.11",
    "classnames": "^2.3.2",
    "postcss": "^8.5.6",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "tailwindcss": "^4.1.11"
  },
  "devDependencies": {
    "@babel/core": "^7.28.0",
    "@babel/preset-env": "^7.28.0",
    "@babel/preset-react": "^7.27.1",
    "@iconify/react": "^6.0.0",
    "@types/node": "^17.0.12",
    "@types/react": "^19.0.1",
    "@types/react-dom": "^19.0.2",
    "eslint-config-custom": "*",
    "next": "^15.4.6",
    "typescript": "^5.5.4"
  }
}
</file>

<file path="postcss.config.mjs">
const config = { plugins: { "@tailwindcss/postcss": {}, }, }; export default config;
</file>

<file path="puck.config.tsx">
import type { Config } from "@measured/puck";
import { Headline } from "./app/components/headline";
import { Bodytext } from "./app/components/bodytext";
import { Section } from "./app/components/section";
import { PuckButton } from "./app/components/button";
import { Footer } from "./app/sections/footer";
import { Stack } from "./app/components/stack";
import { Spacer } from "./app/components/spacer";
import { Hero } from "./app/sections/hero";
import { Team } from "./app/sections/team";
import { PuckCard } from "./app/components/card";
import { PuckHeader } from "./app/components/header";
import { Collapsible } from "./app/components/collapsible";
import { Faq } from "./app/sections/faq";
import { Stats } from "./app/sections/stats";
import { Callout } from "./app/components/callout";

export const config: Config = {
  categories: {
    layout: {
      title: "Layout",
      components: ["Section", "Stack", "Spacer"],
    },
    content: {
      title: "Content",
      components: [
        "Headline",
        "Bodytext",
        "PuckButton",
        "PuckCard",
        "Collapsible",
        "Callout",
      ],
    },
    sections: {
      title: "Sections",
      components: ["Hero", "Stats", "Team", "Faq", "Footer"],
    },
    hidden: {
      visible: false,
      components: ["PuckHeader"],
    },
    // Fix to hide the "Other" category in the UI
    other: { components: [], visible: false },
  },
  components: {
    Headline,
    PuckButton,
    PuckCard,
    Section,
    Footer,
    Stack,
    Spacer,
    Hero,
    Team,
    Bodytext,
    PuckHeader,
    Collapsible,
    Faq,
    Stats,
    Callout,
  },
};

export default config;
</file>

<file path="README.md">
# `next` recipe

The `next` recipe showcases one of the most powerful ways to implement Puck using to provide an authoring tool for any route in your Next app.

## Demonstrates

- Next.js App Router implementation
- JSON database implementation with HTTP API
- Catch-all routes to use puck for any route on the platform
- Incremental static regeneration (ISR) for all Puck pages

## Usage

Run the generator and enter `next` when prompted

```
npx create-puck-app my-app
```

Start the server

```
yarn dev
```

Navigate to the homepage at https://localhost:3000. To edit the homepage, access the Puck editor at https://localhost:3000/edit.

You can do this for any route on the application, **even if the page doesn't exist**. For example, visit https://localhost:3000/hello/world and you'll receive a 404. You can author and publish a page by visiting https://localhost:3000/hello/world/edit. After publishing, go back to the original URL to see your page.

## Using this recipe

To adopt this recipe you will need to:

- **IMPORTANT** Add authentication to `/edit` routes. This can be done by modifying the example API routes in `/app/puck/api/route.ts` and server component in `/app/puck/[...puckPath]/page.tsx`. **If you don't do this, Puck will be completely public.**
- Integrate your database into the API calls in `/app/puck/api/route.ts`
- Implement a custom puck configuration in `puck.config.tsx`

By default, this recipe will generate static pages by setting `dynamic` to [`force-static`](https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config#dynamic) in the `/app/[...puckPath]/page.tsx`. This will strip headers and cookies. If you need dynamic pages, you can delete this.
</file>

<file path="tsconfig.json">
{
  "extends": "./tsconfig/nextjs.json",
  "compilerOptions": {
    "plugins": [{ "name": "next" }]
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

</files>
</file>

<file path="tsconfig.json">
{
  "extends": "./tsconfig/nextjs.json",
  "compilerOptions": {
    "plugins": [{ "name": "next" }]
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="app/components/callout.tsx">
import { ComponentConfig } from "@measured/puck";
import { Icon } from "@iconify/react";

const calloutStyles = {
    base: "max-w-2xl mx-auto border-1 rounded-2xl p-4",
    info: "bg-theme/5 border-theme text-theme",
    warning: "bg-amber-50 border-amber-500 text-amber-800",
    error: "bg-rose-50 border-rose-500 text-rose-800",
    success: "bg-emerald-50 border-emerald-500 text-emerald-800",
};

const calloutIcons = {
    info: {
        icon: "lucide:info",
        color: "bg-theme",
    },
    warning: {
        icon: "lucide:alert-triangle",
        color: "bg-amber-500",
    },
    error: {
        icon: "lucide:x-circle",
        color: "bg-rose-500",
    },
    success: {
        icon: "lucide:check-circle",
        color: "bg-emerald-500",
    },
};

export const Callout: ComponentConfig = {
    label: "Callout",
    fields: {
        variant: {
            label: "Variant",
            type: "select",
            labelIcon: <Icon icon="lucide:list-ordered" />,
            options: [
                { label: "Info", value: "info" },
                { label: "Warning", value: "warning" },
                { label: "Error", value: "error" },
                { label: "Success", value: "success" },
            ],
        },
        text: {
            label: "Text",
            labelIcon: <Icon icon="lucide:type" />,
            type: "textarea",
            placeholder: "Your Callout Text",
            contentEditable: true,
        },
    },
    defaultProps: {
        variant: "info",
        text: "This is a callout message to draw attention to important information or actions.",
    },
    render: ({ variant, text }) => {
        return (
            <div className={`flex flex-row items-start gap-5 ${calloutStyles.base} ${calloutStyles[variant]}`} role="alert">
                <div className={`text-white p-4 rounded-xl inline-block ${calloutIcons[variant].color}`}>
                    <Icon icon={calloutIcons[variant].icon} />
                </div>
                <p className="">{text}</p>
            </div>
        )
    }
}
</file>

<file path="app/components/card.tsx">
import { ComponentConfig } from "@measured/puck";
import { Icon } from "@iconify/react";

export const Card = ({
    bgColor = "bg-white",
    type = "icon",
    imgUrl = "https://mockmind-api.uifaces.co/content/abstract/50.jpg",
    icon = "lucide:info",
    title = "Card Title",
    description = "This is a brief description of the card content.",
}) => {
    return (
        <div className={`p-8 rounded-2xl shadow-sm ${bgColor}`}>
            {type === 'image' && <img src={imgUrl} alt={`${title} image`} title={`${title} image`} loading="lazy" />}
            {type === 'icon' && (
                <div className="bg-theme text-white p-4 rounded-full inline-block mb-6">
                    <Icon icon={icon} />
                </div>
            )}
            <h3>{title}</h3>
            <p>{description}</p>
        </div>
    )
}

export const PuckCard: ComponentConfig = {
    label: "Card",
    resolveFields: (data) => {
        const fields = {
            title: {
                type: "text" as const,
                label: "Title",
                labelIcon: <Icon icon="lucide:type" />,
                placeholder: "Card Title",
                contentEditable: true,
            },
            description: {
                type: "textarea" as const,
                label: "Description",
                labelIcon: <Icon icon="lucide:type" />,
                placeholder: "Brief description of the card content.",
                contentEditable: true,
            },
            bgColor: {
                label: "Background Color",
                labelIcon: <Icon icon="lucide:paint-bucket" />,
                type: "select" as const,
                options: [
                    { label: "White", value: "bg-white" },
                    { label: "Light", value: "bg-light" },
                    { label: "Dark", value: "bg-dark" },
                    { label: "Muted", value: "bg-muted" },
                    { label: "Theme", value: "bg-theme" },
                ],
            },
            type: {
                type: "radio" as const,
                label: "Card Type",
                labelIcon: <Icon icon="lucide:square-equal" />,
                options: [
                    { label: "Text", value: "text" },
                    { label: "Image", value: "image" },
                    { label: "Icon", value: "icon" },
                ],
            },
        };

        if (data.props.type === "image") {
            return {
                ...fields,
                imgUrl: {
                    label: "Image URL",
                    labelIcon: <Icon icon="lucide:image" />,
                    type: "text" as const,
                    placeholder: "Paste image URL here",
                },
            };
        } else if (data.props.type === "icon") {
            return {
                ...fields,
                icon: {
                    type: "select" as const,
                    label: "Icon",
                    labelIcon: <Icon icon="lucide:circle" />,
                    options: [
                        { label: "None", value: "" },
                        { label: "Info", value: "lucide:info" },
                        { label: "Warning", value: "lucide:triangle-alert" },
                        { label: "Error", value: "lucide:octagon-alert" },
                        { label: "Success", value: "lucide:circle-check" },
                    ],
                },
            };
        } else {
            return {
                ...fields,
            };
        }
    },
    defaultProps: {
        bgColor: "bg-light",
        type: "icon",
        imgUrl: "https://mockmind-api.uifaces.co/content/abstract/50.jpg",
        icon: "lucide:info",
        title: "Card Title",
        description: "This is a brief description of the card content.",
    },
    render: ({ bgColor, type, imgUrl, icon, title, description }) => {
        return (
            <Card
                bgColor={bgColor}
                type={type}
                imgUrl={imgUrl}
                icon={icon}
                title={title}
                description={description}
            />
        )
    }
}
</file>

<file path="app/components/header.tsx">
import { ComponentConfig } from "@measured/puck";
import { Button } from "./button";
import { Icon } from "@iconify/react";

export const Header = ({
    logo,
    navitems = [],
    ctaButton = {
        url: "#",
        style: "themePrimary",
        label: "Label",
        leadingIcon: "lucide:circle",
        trailingIcon: "lucide:circle",
    }
}) => {
    return (
        <header className="bg-white p-4 sticky top-0 z-10 shadow-lg">
            <div className="container flex items-center justify-between">
                {logo && <img className="max-h-12" src={logo} alt="Logo" title="Logo" />}
                <nav>
                    <menu className="flex items-center gap-6">
                        {navitems.map(
                            (item, index) => (
                                <li key={index}>
                                    <a href={item.url}>{item.label}</a>
                                </li>
                            )
                        )}
                    </menu>
                </nav>
                {ctaButton && <Button
                    url={ctaButton.url}
                    style={ctaButton.style}
                    label={ctaButton.label}
                    leadingIcon={ctaButton.leadingIcon}
                    trailingIcon={ctaButton.trailingIcon}
                />}
            </div>
        </header>
    )
}

export const PuckHeader: ComponentConfig = {
    label: "Header",
    fields: {
        logo: {
            label: "Logo URL",
            labelIcon: <Icon icon="lucide:image" />,
            type: "text",
        },
        navitems: {
            type: "array",
            arrayFields: {
                label: {
                    type: "text",
                },
                url: {
                    type: "text",
                },
            },
        },
        button: {
            label: "Button",
            labelIcon: <Icon icon="lucide:captions" />,
            type: "object",
            objectFields: {
                label: {
                    type: "text",
                    label: "Label",
                    labelIcon: <Icon icon="lucide:type" />,
                    placeholder: "Button Label",
                },
                url: {
                    label: "URL",
                    labelIcon: <Icon icon="lucide:link" />,
                    type: "text"
                },
                style: {
                    label: "Style",
                    labelIcon: <Icon icon="lucide:chevron-down" />,
                    type: "select",
                    options: [
                        { label: "Theme Primary", value: "themePrimary" },
                        { label: "Theme Secondary", value: "themeSecondary" },
                        { label: "White Primary", value: "whitePrimary" },
                        { label: "White Secondary", value: "whiteSecondary" },
                        { label: "Ghost", value: "ghost" },
                    ],
                },
                leadingIcon: {
                    type: "select",
                    label: "Leading Icon",
                    labelIcon: <Icon icon="lucide:circle" />,
                    options: [
                        { label: "None", value: "" },
                        { label: "arrow-left", value: "tabler:arrow-narrow-left" },
                        { label: "arrow-right", value: "tabler:arrow-narrow-right" },
                    ],
                },
                trailingIcon: {
                    type: "select",
                    label: "Trailing Icon",
                    labelIcon: <Icon icon="lucide:circle" />,
                    options: [
                        { label: "None", value: "" },
                        { label: "arrow-left", value: "tabler:arrow-narrow-left" },
                        { label: "arrow-right", value: "tabler:arrow-narrow-right" },
                    ],
                },
            }
        }
    },
    defaultProps: {
        logo: "https://cdn.brandfetch.io/idOPDYImH9/theme/dark/logo.svg?c=1bxid64Mup7aczewSAYMX&t=1667644681223",
        navitems: [
            { label: "Home", url: "#" },
            { label: "About", url: "#" },
            { label: "Services", url: "#" },
            { label: "Contact", url: "#" },
        ],
        button: {
            label: "Contact Us",
            url: "#",
            style: "themePrimary",
            leadingIcon: "lucide:phone-call",
            trailingIcon: "",
        }
    },
    permissions: {
        delete: false,
        drag: false,
        duplicate: false,
    },
    render: ({ logo, navitems, button }) => {
        return <Header
            logo={logo}
            navitems={navitems}
            ctaButton={{
                label: button.label,
                url: button.url,
                style: button.style,
                leadingIcon: button.leadingIcon,
                trailingIcon: button.trailingIcon,
            }}
        />;
    }
}
</file>

<file path="app/fields/slider.js">
import { FieldLabel } from "@measured/puck";

export const puckSlider = ({ field, onChange, value }) => (
    <FieldLabel label={field.label} icon={field.icon}>
        <input
            type="range"
            min={field.min}
            max={field.max}
            step={field.step}
            defaultValue={value}
            name={field.label}
            onChange={(e) => onChange(e.currentTarget.value)}
        />
    </FieldLabel >
)
</file>

<file path="app/sections/faq.tsx">
import { ComponentConfig } from "@measured/puck";
import { Icon } from "@iconify/react";

export const Faq: ComponentConfig = {
    label: "FAQ",
    fields: {
        content: {
            type: "slot",
            allow: ["Collapsible"],
        },
        bgColor: {
            label: "Background Color",
            labelIcon: <Icon icon="lucide:paint-bucket" />,
            type: "select",
            options: [
                { label: "None", value: "bg-transparent" },
                { label: "Light", value: "bg-light" },
                { label: "Dark", value: "bg-dark" },
                { label: "Muted", value: "bg-muted" },
                { label: "Theme", value: "bg-theme" },
            ],
        },
        anchorId: {
            label: "ID",
            labelIcon: <Icon icon="lucide:hash" />,
            type: "text",
        },
        intro: {
            label: "Introduction",
            labelIcon: <Icon icon="lucide:captions" />,
            type: "object",
            objectFields: {
                title: {
                    label: "Headline",
                    labelIcon: <Icon icon="lucide:heading" />,
                    type: "text",
                    contentEditable: true,
                },
                subline: {
                    label: "Subline",
                    labelIcon: <Icon icon="lucide:type" />,
                    type: "textarea",
                    contentEditable: true,
                },
            }
        },
    },
    defaultProps: {
        bgColor: "bg-transparent",
        anchorId: "faq",
        intro: {
            title: "Frequently Asked Questions",
            subline: "Here are some common questions and answers to help you understand our services better.",
        },
        content: [
            {
                type: "Collapsible",
                props: {
                    title: "Question 1",
                    bgColor: "bg-light",
                    content: [
                        {
                            type: "Bodytext",
                            props: {
                                text: "This is the answer to question 1. It provides detailed information about the topic.",
                                size: "text-xl",
                                alignment: "text-left",
                            }
                        }
                    ]
                },
            },
            {
                type: "Collapsible",
                props: {
                    title: "Question 2",
                    bgColor: "bg-light",
                    content: [
                        {
                            type: "Bodytext",
                            props: {
                                text: "This is the answer to question 2. It provides detailed information about the topic.",
                                size: "text-xl",
                                alignment: "text-left",
                            }
                        }
                    ]
                },
            },
            {
                type: "Collapsible",
                props: {
                    title: "Question 3",
                    bgColor: "bg-light",
                    content: [
                        {
                            type: "Bodytext",
                            props: {
                                text: "This is the answer to question 3. It provides detailed information about the topic.",
                                size: "text-xl",
                                alignment: "text-left",
                            }
                        }
                    ]
                },
            },
        ],
    },
    render: ({ bgColor, anchorId, intro, content: Content }) => {
        return (
            <section id={anchorId} className={`py-30 ${bgColor}`}>
                <div className="container">
                    <div className="max-w-4xl">
                        <h2>{intro.title}</h2>
                        {intro.subline && <p className="text-2xl mb-12">{intro.subline}</p>}
                    </div>
                    <Content className="flex flex-col gap-4 md:gap-6" />
                </div>
            </section>
        )
    },
}
</file>

<file path=".gitignore">
.DS_Store
.env
node_modules
package-lock.json
.next
</file>

<file path="next-env.d.ts">
/// <reference types="next" />
/// <reference types="next/image-types/global" />
/// <reference path="./.next/types/routes.d.ts" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.
</file>

<file path="package.json">
{
  "name": "puck-test",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@measured/puck": "0.20.0",
    "@tailwindcss/postcss": "^4.1.11",
    "classnames": "^2.3.2",
    "postcss": "^8.5.6",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "tailwindcss": "^4.1.11"
  },
  "devDependencies": {
    "@babel/core": "^7.28.0",
    "@babel/preset-env": "^7.28.0",
    "@babel/preset-react": "^7.27.1",
    "@iconify/react": "^6.0.0",
    "@types/node": "^17.0.12",
    "@types/react": "^19.0.1",
    "@types/react-dom": "^19.0.2",
    "eslint-config-custom": "*",
    "next": "^15.4.6",
    "typescript": "^5.5.4"
  }
}
</file>

<file path="README.md">
# `next` recipe

The `next` recipe showcases one of the most powerful ways to implement Puck using to provide an authoring tool for any route in your Next app.

## Demonstrates

- Next.js App Router implementation
- JSON database implementation with HTTP API
- Catch-all routes to use puck for any route on the platform
- Incremental static regeneration (ISR) for all Puck pages

## Usage

Run the generator and enter `next` when prompted

```
npx create-puck-app my-app
```

Start the server

```
yarn dev
```

Navigate to the homepage at https://localhost:3000. To edit the homepage, access the Puck editor at https://localhost:3000/edit.

You can do this for any route on the application, **even if the page doesn't exist**. For example, visit https://localhost:3000/hello/world and you'll receive a 404. You can author and publish a page by visiting https://localhost:3000/hello/world/edit. After publishing, go back to the original URL to see your page.

## Using this recipe

To adopt this recipe you will need to:

- **IMPORTANT** Add authentication to `/edit` routes. This can be done by modifying the example API routes in `/app/puck/api/route.ts` and server component in `/app/puck/[...puckPath]/page.tsx`. **If you don't do this, Puck will be completely public.**
- Integrate your database into the API calls in `/app/puck/api/route.ts`
- Implement a custom puck configuration in `puck.config.tsx`

By default, this recipe will generate static pages by setting `dynamic` to [`force-static`](https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config#dynamic) in the `/app/[...puckPath]/page.tsx`. This will strip headers and cookies. If you need dynamic pages, you can delete this.
</file>

<file path="app/components/collapsible.tsx">
import { ComponentConfig } from "@measured/puck";
import { Icon } from "@iconify/react";

export const Collapsible: ComponentConfig = {
    label: "Collapsible",
    fields: {
        content: {
            type: "slot",
            allow: ["Bodytext", "PuckButton", "Stack", "Spacer"],
        },
        title: {
            label: "Title",
            labelIcon: <Icon icon="lucide:type" />,
            type: "text",
            placeholder: "Enter your text here",
            contentEditable: true,
        },
        bgColor: {
            label: "Background Color",
            labelIcon: <Icon icon="lucide:paint-bucket" />,
            type: "select",
            options: [
                { label: "White", value: "bg-white" },
                { label: "Light", value: "bg-light" },
                { label: "Dark", value: "bg-dark" },
                { label: "Muted", value: "bg-muted" },
                { label: "Theme", value: "bg-theme" },
            ],
        },
    },
    defaultProps: {
        title: "Collapsible Title",
        bgColor: "bg-light",
        content: [
            {
                type: "Bodytext",
                props: {
                    text: "This is the content of the collapsible section. You can add more details here.",
                    size: "text-xl",
                    alignment: "text-left",
                }
            }
        ]
    },
    render: ({ title, bgColor, puck: {isEditing}, content: Content }) => {
        return (
            <details className={`group p-6 rounded-2xl shadow-sm ${bgColor}`} open={isEditing ? true : false}>
                <summary className="flex items-center justify-between cursor-pointer">
                    <span className="text-2xl font-semibold">{title}</span>
                    <Icon icon="lucide:chevron-down" className="transition-transform group-open:rotate-180" />
                </summary>
                <Content className="flex flex-col gap-4 mt-6" />
            </details>
        );
    }
}
</file>

<file path="app/components/headline.tsx">
import { ComponentConfig } from "@measured/puck";
import { Icon } from "@iconify/react";
import React from "react";

export const Headline: ComponentConfig = {
  label: "Headline",
  fields: {
    title: {
      label: "Headline",
      labelIcon: <Icon icon="lucide:heading" />,
      type: "text",
      placeholder: "Enter your headline here",
      contentEditable: true,
    },
    hierarchy: {
      label: "Hierarchy",
      type: "select",
      labelIcon: <Icon icon="lucide:list-ordered" />,
      options: [
        { label: "Headline 1", value: "h1" },
        { label: "Headline 2", value: "h2" },
        { label: "Headline 3", value: "h3" },
        { label: "Headline 4", value: "h4" },
        { label: "Headline 5", value: "h5" },
        { label: "Headline 6", value: "h6" },
      ],
    },
    alignment: {
      type: "radio",
      label: "Alignment",
      labelIcon: <Icon icon="lucide:align-left" />,
      options: [
        { label: "Start", value: "text-left" },
        { label: "Center", value: "text-center" },
        { label: "End", value: "text-right" },
      ],
    },
  },
  defaultProps: {
    title: "Headline",
    hierarchy: "h2",
    alignment: "text-left",
  },
  render: ({ title, hierarchy, alignment }) => {
    return React.createElement(hierarchy, { className: alignment }, title);
  }
}
</file>

<file path="app/layout.tsx">
import "./styles.css";

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="de" className="scroll-smooth">
      <head>
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" />
        <link href="https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,400;0,700;1,400;1,700&family=Poppins:ital,wght@0,600;1,600&display=swap" rel="stylesheet" />
      </head>
      <body>{children}</body>
    </html>
  );
}
</file>

<file path="app/puck/[...puckPath]/client.tsx">
"use client";

import type { Data } from "@measured/puck";
import { Puck } from "@measured/puck";
import config from "../../../puck.config";
import { Icon } from "@iconify/react";
import { puckSlider } from "../../fields/slider";
import { puckToggle } from "../../fields/toggle";
import { headerActions } from "../custom/headerActions";

export function Client({ path, data }: { path: string; data: Partial<Data> }) {
  return (
    <Puck
      config={config}
      data={data}
      overrides={{
        fieldTypes: {
          slider: puckSlider,
          toggle: puckToggle,
        },
        headerActions: headerActions,
      }}
      viewports={[
        {
          width: 480,
          height: "auto",
          label: "SM",
          icon: <Icon icon="tabler:device-mobile" />,
        },
        {
          width: 768,
          height: "auto",
          label: "MD",
          icon: <Icon icon="tabler:device-mobile-rotated" />,
        },
        {
          width: 1024,
          height: "auto",
          label: "LG",
          icon: <Icon icon="tabler:device-tablet" />,
        },
        {
          width: 1280,
          height: "auto",
          label: "XL",
          icon: <Icon icon="tabler:device-laptop" />,
        },
        {
          width: "100%" as unknown as number,
          height: "auto",
          label: "2XL",
          icon: <Icon icon="tabler:device-desktop" />,
        },
      ]}
      onPublish={async (data) => {
        await fetch("/puck/api", {
          method: "post",
          body: JSON.stringify({ data, path }),
        });
      }}
    />
  );
}
</file>

<file path="puck.config.tsx">
import type { Config } from "@measured/puck";
import { Headline } from "./app/components/headline";
import { Bodytext } from "./app/components/bodytext";
import { Section } from "./app/components/section";
import { PuckButton } from "./app/components/button";
import { Footer } from "./app/sections/footer";
import { Stack } from "./app/components/stack";
import { Spacer } from "./app/components/spacer";
import { Hero } from "./app/sections/hero";
import { Team } from "./app/sections/team";
import { PuckCard } from "./app/components/card";
import { PuckHeader } from "./app/components/header";
import { Collapsible } from "./app/components/collapsible";
import { Faq } from "./app/sections/faq";
import { Stats } from "./app/sections/stats";
import { Callout } from "./app/components/callout";

export const config: Config = {
  categories: {
    layout: {
      title: "Layout",
      components: ["Section", "Stack", "Spacer"],
    },
    content: {
      title: "Content",
      components: [
        "Headline",
        "Bodytext",
        "PuckButton",
        "PuckCard",
        "Collapsible",
        "Callout",
      ],
    },
    sections: {
      title: "Sections",
      components: ["Hero", "Stats", "Team", "Faq", "Footer"],
    },
    hidden: {
      visible: false,
      components: ["PuckHeader"],
    },
    // Fix to hide the "Other" category in the UI
    other: { components: [], visible: false },
  },
  components: {
    Headline,
    PuckButton,
    PuckCard,
    Section,
    Footer,
    Stack,
    Spacer,
    Hero,
    Team,
    Bodytext,
    PuckHeader,
    Collapsible,
    Faq,
    Stats,
    Callout,
  },
};

export default config;
</file>

<file path="app/styles.css">
@import url("https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,400;0,700;1,400;1,700&family=Poppins:ital,wght@0,600;1,600&display=swap");
@import "tailwindcss";

@theme {
  --font-poppins: "Poppins", sans-serif;
  --font-lato: "Lato", sans-serif;
}

@theme static {
  --color-theme: var(--color-blue-700);
  --color-theme-hover: var(--color-blue-600);
  --color-theme-active: var(--color-blue-800);
  --color-muted: var(--color-blue-50);
  --color-light: var(--color-slate-50);
  --color-dark: var(--color-slate-950);
}

@utility container {
  margin: 0 auto;
  padding: 0 1rem;

  @variant md {
    padding: 0 1.5rem;
  }

  @variant xl {
    padding: 0 2rem;
  }

  @variant 2xl {
    max-width: 1280px;
  }
}

@layer components {
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    @apply font-bold font-poppins leading-tight;
  }

  h1 {
    @apply lg:text-6xl text-5xl mb-8;
  }

  h2 {
    @apply lg:text-5xl text-4xl mt-8 mb-6;
  }

  h3 {
    @apply lg:text-4xl text-3xl mt-6 mb-3;
  }

  h4 {
    @apply lg:text-3xl text-2xl mt-3 mb-2;
  }

  h5 {
    @apply lg:text-2xl text-xl mt-2 mb-1;
  }

  h6 {
    @apply lg:text-xl text-lg mt-1 mb-0.5;
  }

  p,
  a,
  label {
    @apply font-lato text-xl leading-normal;
  }

  .iconify {
    @apply inline-block size-6;
  }
}

/* -------------------- Text Colors -------------------- */

.bg-light,
.bg-muted,
.bg-transparent {
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    @apply text-slate-800;
  }

  p,
  label {
    @apply text-slate-600;
  }
}

.bg-dark,
.bg-theme {
  @apply *:text-slate-50;
}
</file>

<file path="database.json">
{"/":{"root":{"props":{"content":[{"type":"PuckHeader","props":{"id":"header","button":{"label":"Contact us","url":"#","leadingIcon":"tabler:arrow-narrow-left"},"navitems":[{"label":"Home","url":"#"},{"label":"Team","url":"#team"},{"label":"Services","url":"#"},{"label":"FAQ","url":"faq"},{"label":"Contact","url":"#"}],"logo":"https://cdn.brandfetch.io/idOPDYImH9/theme/dark/logo.svg?c=1bxid64Mup7aczewSAYMX&t=1667644681223"}},{"type":"Hero","props":{"bgColor":"bg-theme","content":{"title":"Welcome to Our Site","subline":"Discover amazing content and features","imgUrl":"https://raw.githubusercontent.com/alan-crts/shadcn-iconpicker/refs/heads/main/public/preview.gif"},"id":"Hero-8064acf5-a2da-450f-bfa9-105320ddd0a6"}},{"type":"Section","props":{"content":[{"type":"Callout","props":{"variant":"success","text":"This is a callout message to draw attention to important information or actions.","id":"Callout-8a3c55fc-bd24-419f-aa23-32a75c6d8f88"}}],"bgColor":"bg-transparent","id":"Section-e5b6dad5-5d3b-4fc2-8661-9d48c833aa95"}},{"type":"Stats","props":{"content":[{"type":"PuckCard","props":{"id":"PuckCard-d3c1ce84-a186-47d9-ba39-b8ceb0752e77","type":"icon","bgColor":"bg-light","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/50.jpg","icon":"lucide:info","title":"12K","description":"Active users"}},{"type":"PuckCard","props":{"id":"PuckCard-d922dffc-96ba-4e27-8b42-490c8123af5f","type":"icon","bgColor":"bg-light","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/49.jpg","icon":"lucide:info","title":"99%","description":"Uptime"}},{"type":"PuckCard","props":{"id":"PuckCard-4720572b-9ee2-498d-a14e-1055b975c833","type":"icon","bgColor":"bg-light","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/47.jpg","icon":"lucide:info","title":"12M $","description":"Revenue"}}],"bgColor":"bg-transparent","anchorId":"faq","intro":{"title":"Trusted by thousands of users worldwide","subline":"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Maiores impedit perferendis suscipit eaque, iste dolor cupiditate blanditiis ratione."},"id":"Stats-215853ee-9125-4415-a46d-518d0b23fb69"}},{"type":"Team","props":{"content":[{"type":"PuckCard","props":{"id":"PuckCard-9f43ff6e-aade-429f-9fdc-980ebb3b88f5","type":"image","bgColor":"bg-white","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/50.jpg","icon":"lucide:info","title":"Card Title","description":"This is a brief description of the card content."}},{"type":"PuckCard","props":{"id":"PuckCard-2a89cae4-4b42-432f-bc04-26f18ffb20ba","type":"image","bgColor":"bg-white","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/49.jpg","icon":"lucide:info","title":"Card Title","description":"This is a brief description of the card content."}},{"type":"PuckCard","props":{"id":"PuckCard-96fd939d-932d-4d0b-8ac2-c32fe164eb5e","type":"image","bgColor":"bg-white","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/49.jpg","icon":"lucide:info","title":"Card Title","description":"This is a brief description of the card content."}},{"type":"PuckCard","props":{"id":"PuckCard-eeaefafd-e74d-4f3f-892d-c64afcf22416","type":"image","bgColor":"bg-white","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/49.jpg","icon":"lucide:info","title":"Card Title","description":"This is a brief description of the card content."}}],"bgColor":"bg-muted","intro":{"title":"Team member introduction","subline":"Our team is made up of talented individuals who are passionate about what they do."},"id":"Team-a4155d14-bb55-4ff4-978a-97f3fed3e53b","anchorId":"team"}},{"type":"Faq","props":{"content":[{"type":"Collapsible","props":{"content":[{"type":"Bodytext","props":{"id":"Bodytext-ddcffef8-d2d4-4958-b153-1a4001840ee9","text":"This is the answer to question 1. It provides detailed information about the topic.","size":"text-lg","alignment":"text-left"}},{"type":"Stack","props":{"content":[{"type":"PuckButton","props":{"id":"PuckButton-cfe6f901-2ffc-401e-857b-f7c0e6fbed39","label":"Button","url":"#","style":"themePrimary"}},{"type":"PuckButton","props":{"id":"PuckButton-9488d4c9-6b7b-4af5-98ce-7f49418e6306","label":"Button","url":"#","style":"themeSecondary"}},{"type":"PuckButton","props":{"id":"PuckButton-730e31bd-33ac-4a05-87dc-2d390570a251","label":"Button","url":"#","style":"whitePrimary"}},{"type":"PuckButton","props":{"id":"PuckButton-70f43404-4f4c-4c56-a54f-a07798b00e6d","label":"Button","url":"#","style":"whiteSecondary"}},{"type":"PuckButton","props":{"id":"PuckButton-633e4e92-8ef0-484c-bf48-b98c5f199907","label":"Button","url":"#","style":"ghost"}}],"direction":"grid-cols-[repeat(auto-fit,_minmax(240px,_1fr))]","verticalAlignment":"items-center","horizontalAlignment":"justify-center justify-items-center","gap":"gap-6","id":"Stack-46947577-8e00-43ba-b230-dc78a640ca09"}}],"id":"Collapsible-d491f40b-4b71-4866-81e3-8fac62edc796","title":"Question 1","bgColor":"bg-white"}},{"type":"Collapsible","props":{"content":[{"type":"Bodytext","props":{"id":"Bodytext-e9ac4957-36bf-4177-9297-605e38f83e8e","text":"This is the answer to question 2. It provides detailed information about the topic.","size":"text-lg","alignment":"text-left"}}],"id":"Collapsible-6e5a871f-e408-48b9-9a0d-55723b0df10f","title":"Question 2","bgColor":"bg-white"}},{"type":"Collapsible","props":{"content":[{"type":"Bodytext","props":{"id":"Bodytext-8d55bd8c-ff04-431b-a97b-3247baad8aa5","text":"This is the answer to question 3. It provides detailed information about the topic.","size":"text-lg","alignment":"text-left"}}],"id":"Collapsible-968a6380-3036-440a-8b83-4a9eb705cf50","title":"Question 3","bgColor":"bg-white"}}],"bgColor":"bg-light","anchorId":"faq","intro":{"title":"Frequently Asked Questions","subline":"Here are some common questions and answers to help you understand our services better."},"id":"Faq-ee718b8a-fc59-48ac-ba61-d3a20400aded"}},{"type":"Section","props":{"content":[{"type":"Headline","props":{"title":"Headline","hierarchy":"h1","alignment":"text-left","id":"Headline-8a658ed2-80f8-43b9-a023-e31edd5f1f70"}},{"type":"Bodytext","props":{"text":"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.","size":"text-xl","alignment":"text-left","id":"Bodytext-f1babdf9-1ebb-45a6-a37d-254ec9eb629d"}},{"type":"Spacer","props":{"size":"3","id":"Spacer-d9f082cf-6477-4682-839c-81a5c58ae942"}},{"type":"Stack","props":{"content":[{"type":"PuckCard","props":{"id":"PuckCard-f201ba5a-72ea-4656-a96d-8e59e67f5262","bgColor":"bg-light","type":"icon","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/50.jpg","icon":"lucide:info","title":"Card Title","description":"This is a brief description of the card content."}},{"type":"PuckCard","props":{"id":"PuckCard-52662b34-e210-4116-a790-ae56d049277a","bgColor":"bg-light","type":"icon","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/50.jpg","icon":"lucide:info","title":"Card Title","description":"This is a brief description of the card content."}},{"type":"PuckCard","props":{"id":"PuckCard-3f2033b8-bc44-4a3f-a5d1-27214b2ae2d6","bgColor":"bg-light","type":"icon","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/50.jpg","icon":"lucide:info","title":"Card Title","description":"This is a brief description of the card content. This is a brief description of the card content."}},{"type":"PuckCard","props":{"id":"PuckCard-7f931692-4ab4-44b5-bacf-62a1a032c654","bgColor":"bg-light","type":"icon","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/50.jpg","icon":"lucide:info","title":"Card Title","description":"This is a brief description of the card content."}}],"direction":"flex-row","verticalAlignment":"items-start","horizontalAlignment":"justify-center justify-items-center","gap":"gap-4","id":"Stack-4ce65a8f-b406-4749-8ff2-fc29b007be71"}}],"bgColor":"bg-transparent","id":"Section-c63bb700-512f-4498-94ed-2a614aafac68"}},{"type":"Footer","props":{"bgColor":"bg-dark","text":"© YYYY Your Company. All rights reserved.","id":"Footer-ae82d743-28fc-46b3-8c52-8d046c3ae5ce"}}],"nav":[{"type":"PuckHeader","props":{"id":"header"}},{"type":"Hero","props":{"bgColor":"bg-theme","content":{"title":"Welcome to Our Site","subline":"Discover amazing content and features","imgUrl":"https://raw.githubusercontent.com/alan-crts/shadcn-iconpicker/refs/heads/main/public/preview.gif"},"id":"Hero-d7843c7a-6eb0-460c-b3e6-7a519650b90d"}}],"title":"Page Title","navitems":[{"label":"Nav Item 1","url":"#"},{"label":"Nav Item 2","url":"#"}]}},"content":[{"type":"PuckHeader","props":{"logo":"https://cdn.brandfetch.io/idOPDYImH9/theme/dark/logo.svg?c=1bxid64Mup7aczewSAYMX&t=1667644681223","navitems":[{"label":"Home","url":"#"},{"label":"About","url":"#stats"},{"label":"Team","url":"#team"},{"label":"FAQ","url":"#faq"}],"button":{"label":"Contact Us","url":"#","style":"themePrimary","leadingIcon":"lucide:phone-call","trailingIcon":""},"id":"PuckHeader-cabdb3c1-4178-479a-a605-9a11e7559f36"}},{"type":"Hero","props":{"bgColor":"bg-theme","content":{"title":"Welcome to Our Site","subline":"Discover amazing content and features","imgUrl":"https://raw.githubusercontent.com/alan-crts/shadcn-iconpicker/refs/heads/main/public/preview.gif"},"id":"Hero-931db9ec-e8d6-485c-9d52-fd14a7639b5b"}},{"type":"Stats","props":{"content":[{"type":"PuckCard","props":{"id":"PuckCard-aececadc-3fe1-452a-a374-c97311b3e6a9","type":"icon","bgColor":"bg-light","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/50.jpg","icon":"lucide:info","title":"XX","description":"Amazing statistic 1"}},{"type":"PuckCard","props":{"id":"PuckCard-fe8f47d7-c6f4-4b87-a476-c3d06e97de1e","type":"icon","bgColor":"bg-light","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/49.jpg","icon":"lucide:info","title":"XX","description":"Amazing statistic 2"}},{"type":"PuckCard","props":{"id":"PuckCard-fa6d2770-fdc5-48db-907d-891523a63e9c","type":"icon","bgColor":"bg-light","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/47.jpg","icon":"lucide:info","title":"XX","description":"Amazing statistic 3"}}],"bgColor":"bg-muted","anchorId":"stats","intro":{"title":"Trusted by thousands of users worldwide","subline":"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Maiores impedit perferendis suscipit eaque, iste dolor cupiditate blanditiis ratione."},"id":"Stats-792bccbb-b677-4321-805b-8edb6a945dbd"}},{"type":"Team","props":{"content":[{"type":"PuckCard","props":{"id":"PuckCard-ceecd4be-0154-4821-84b3-4b6da8d1af92","type":"image","bgColor":"bg-light","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/50.jpg","icon":"lucide:info","title":"Card Title","description":"This is a brief description of the card content."}},{"type":"PuckCard","props":{"id":"PuckCard-bfe863ce-96d4-4522-97f9-b28359065dd3","type":"image","bgColor":"bg-light","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/49.jpg","icon":"lucide:info","title":"Card Title","description":"This is a brief description of the card content."}},{"type":"PuckCard","props":{"id":"PuckCard-a2c8cd12-1e7f-4c74-b306-092234b78248","type":"image","bgColor":"bg-light","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/49.jpg","icon":"lucide:info","title":"Card Title","description":"This is a brief description of the card content."}},{"type":"PuckCard","props":{"id":"PuckCard-4c0946f6-af04-4e65-907c-8e41312e84c3","type":"image","bgColor":"bg-light","imgUrl":"https://mockmind-api.uifaces.co/content/abstract/47.jpg","icon":"lucide:info","title":"Card Title","description":"This is a brief description of the card content."}}],"bgColor":"bg-transparent","anchorId":"team","intro":{"title":"Team member introduction","subline":"Our team is made up of talented individuals who are passionate about what they do."},"id":"Team-6ac8d9b6-bd5b-4cbd-b015-e74a36aefcf1"}},{"type":"Faq","props":{"content":[{"type":"Collapsible","props":{"content":[{"type":"Bodytext","props":{"id":"Bodytext-3cf0450b-ecc1-4a23-85ef-7e6cc89b5f20","text":"This is the answer to question 1. It provides detailed information about the topic.","size":"text-xl","alignment":"text-left"}}],"id":"Collapsible-7ee58a76-fc8e-48e2-b63b-01709af756e2","title":"Question 1","bgColor":"bg-light"}},{"type":"Collapsible","props":{"content":[{"type":"Bodytext","props":{"id":"Bodytext-06d61d25-8827-408b-8789-bb495f5e9998","text":"This is the answer to question 2. It provides detailed information about the topic.","size":"text-xl","alignment":"text-left"}}],"id":"Collapsible-069aef9b-0566-46ee-8062-d95b445ba6da","title":"Question 2","bgColor":"bg-light"}},{"type":"Collapsible","props":{"content":[{"type":"Bodytext","props":{"id":"Bodytext-105ae7fe-7081-4247-ac7e-4ec52ebebf5c","text":"This is the answer to question 3. It provides detailed information about the topic.","size":"text-xl","alignment":"text-left"}}],"id":"Collapsible-09b19349-b825-4409-b904-5a67cff3ccf3","title":"Question 3","bgColor":"bg-light"}}],"bgColor":"bg-transparent","anchorId":"faq","intro":{"title":"Frequently Asked Questions","subline":"Here are some common questions and answers to help you understand our services better."},"id":"Faq-d7789ccf-50d1-4061-a513-f3f6fc77fccb"}},{"type":"Footer","props":{"bgColor":"bg-dark","text":"© YYYY Your Company. All rights reserved.","id":"Footer-7cb573eb-bad8-4f43-8492-16ff28f3a149"}}],"zones":{}}}
</file>

</files>
